// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/discovery.struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2estruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2estruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sirius/proto/error_code.pb.h"
#include "sirius/proto/optype.pb.h"
#include "sirius/proto/user.struct.pb.h"
#include "sirius/proto/unique_id.pb.h"
#include "sirius/proto/config.struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2fdiscovery_2estruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2fdiscovery_2estruct_2eproto;
namespace sirius {
namespace proto {
class AppInfo;
struct AppInfoDefaultTypeInternal;
extern AppInfoDefaultTypeInternal _AppInfo_default_instance_;
class DiscoveryManagerRequest;
struct DiscoveryManagerRequestDefaultTypeInternal;
extern DiscoveryManagerRequestDefaultTypeInternal _DiscoveryManagerRequest_default_instance_;
class DiscoveryManagerResponse;
struct DiscoveryManagerResponseDefaultTypeInternal;
extern DiscoveryManagerResponseDefaultTypeInternal _DiscoveryManagerResponse_default_instance_;
class DiscoveryQueryRequest;
struct DiscoveryQueryRequestDefaultTypeInternal;
extern DiscoveryQueryRequestDefaultTypeInternal _DiscoveryQueryRequest_default_instance_;
class DiscoveryQueryResponse;
struct DiscoveryQueryResponseDefaultTypeInternal;
extern DiscoveryQueryResponseDefaultTypeInternal _DiscoveryQueryResponse_default_instance_;
class DiscoveryRegisterResponse;
struct DiscoveryRegisterResponseDefaultTypeInternal;
extern DiscoveryRegisterResponseDefaultTypeInternal _DiscoveryRegisterResponse_default_instance_;
class QueryInstance;
struct QueryInstanceDefaultTypeInternal;
extern QueryInstanceDefaultTypeInternal _QueryInstance_default_instance_;
class QueryUserPrivilege;
struct QueryUserPrivilegeDefaultTypeInternal;
extern QueryUserPrivilegeDefaultTypeInternal _QueryUserPrivilege_default_instance_;
class ServletInfo;
struct ServletInfoDefaultTypeInternal;
extern ServletInfoDefaultTypeInternal _ServletInfo_default_instance_;
class ServletNamingRequest;
struct ServletNamingRequestDefaultTypeInternal;
extern ServletNamingRequestDefaultTypeInternal _ServletNamingRequest_default_instance_;
class ServletNamingResponse;
struct ServletNamingResponseDefaultTypeInternal;
extern ServletNamingResponseDefaultTypeInternal _ServletNamingResponse_default_instance_;
class ZoneInfo;
struct ZoneInfoDefaultTypeInternal;
extern ZoneInfoDefaultTypeInternal _ZoneInfo_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::AppInfo* Arena::CreateMaybeMessage<::sirius::proto::AppInfo>(Arena*);
template<> ::sirius::proto::DiscoveryManagerRequest* Arena::CreateMaybeMessage<::sirius::proto::DiscoveryManagerRequest>(Arena*);
template<> ::sirius::proto::DiscoveryManagerResponse* Arena::CreateMaybeMessage<::sirius::proto::DiscoveryManagerResponse>(Arena*);
template<> ::sirius::proto::DiscoveryQueryRequest* Arena::CreateMaybeMessage<::sirius::proto::DiscoveryQueryRequest>(Arena*);
template<> ::sirius::proto::DiscoveryQueryResponse* Arena::CreateMaybeMessage<::sirius::proto::DiscoveryQueryResponse>(Arena*);
template<> ::sirius::proto::DiscoveryRegisterResponse* Arena::CreateMaybeMessage<::sirius::proto::DiscoveryRegisterResponse>(Arena*);
template<> ::sirius::proto::QueryInstance* Arena::CreateMaybeMessage<::sirius::proto::QueryInstance>(Arena*);
template<> ::sirius::proto::QueryUserPrivilege* Arena::CreateMaybeMessage<::sirius::proto::QueryUserPrivilege>(Arena*);
template<> ::sirius::proto::ServletInfo* Arena::CreateMaybeMessage<::sirius::proto::ServletInfo>(Arena*);
template<> ::sirius::proto::ServletNamingRequest* Arena::CreateMaybeMessage<::sirius::proto::ServletNamingRequest>(Arena*);
template<> ::sirius::proto::ServletNamingResponse* Arena::CreateMaybeMessage<::sirius::proto::ServletNamingResponse>(Arena*);
template<> ::sirius::proto::ZoneInfo* Arena::CreateMaybeMessage<::sirius::proto::ZoneInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

enum Status : int {
  NORMAL = 1,
  FAULTY = 2,
  DEAD = 3,
  MIGRATE = 4,
  FULL = 5,
  SLOW = 6,
  BUSY = 7
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = NORMAL;
constexpr Status Status_MAX = BUSY;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class AppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.AppInfo) */ {
 public:
  inline AppInfo() : AppInfo(nullptr) {}
  ~AppInfo() override;
  explicit PROTOBUF_CONSTEXPR AppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppInfo(const AppInfo& from);
  AppInfo(AppInfo&& from) noexcept
    : AppInfo() {
    *this = ::std::move(from);
  }

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfo& operator=(AppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppInfo* internal_default_instance() {
    return reinterpret_cast<const AppInfo*>(
               &_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppInfo& a, AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppInfo& from) {
    AppInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.AppInfo";
  }
  protected:
  explicit AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kQuotaFieldNumber = 3,
    kVersionFieldNumber = 4,
    kDeletedFieldNumber = 5,
  };
  // required string app_name = 1;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional int64 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_app_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // optional int64 quota = 3;
  bool has_quota() const;
  private:
  bool _internal_has_quota() const;
  public:
  void clear_quota();
  int64_t quota() const;
  void set_quota(int64_t value);
  private:
  int64_t _internal_quota() const;
  void _internal_set_quota(int64_t value);
  public:

  // optional int64 version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional bool deleted = 5;
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    int64_t app_id_;
    int64_t quota_;
    int64_t version_;
    bool deleted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class ZoneInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.ZoneInfo) */ {
 public:
  inline ZoneInfo() : ZoneInfo(nullptr) {}
  ~ZoneInfo() override;
  explicit PROTOBUF_CONSTEXPR ZoneInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoneInfo(const ZoneInfo& from);
  ZoneInfo(ZoneInfo&& from) noexcept
    : ZoneInfo() {
    *this = ::std::move(from);
  }

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoneInfo& operator=(ZoneInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZoneInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoneInfo* internal_default_instance() {
    return reinterpret_cast<const ZoneInfo*>(
               &_ZoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZoneInfo& a, ZoneInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoneInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoneInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoneInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoneInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZoneInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZoneInfo& from) {
    ZoneInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.ZoneInfo";
  }
  protected:
  explicit ZoneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneFieldNumber = 1,
    kAppNameFieldNumber = 3,
    kZoneIdFieldNumber = 2,
    kAppIdFieldNumber = 4,
    kQuotaFieldNumber = 5,
    kVersionFieldNumber = 6,
    kDeletedFieldNumber = 7,
  };
  // required string zone = 1;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // required string app_name = 3;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional int64 zone_id = 2;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int64_t zone_id() const;
  void set_zone_id(int64_t value);
  private:
  int64_t _internal_zone_id() const;
  void _internal_set_zone_id(int64_t value);
  public:

  // optional int64 app_id = 4;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_app_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // optional int64 quota = 5;
  bool has_quota() const;
  private:
  bool _internal_has_quota() const;
  public:
  void clear_quota();
  int64_t quota() const;
  void set_quota(int64_t value);
  private:
  int64_t _internal_quota() const;
  void _internal_set_quota(int64_t value);
  public:

  // optional int64 version = 6;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional bool deleted = 7;
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.ZoneInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    int64_t zone_id_;
    int64_t app_id_;
    int64_t quota_;
    int64_t version_;
    bool deleted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class ServletInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.ServletInfo) */ {
 public:
  inline ServletInfo() : ServletInfo(nullptr) {}
  ~ServletInfo() override;
  explicit PROTOBUF_CONSTEXPR ServletInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServletInfo(const ServletInfo& from);
  ServletInfo(ServletInfo&& from) noexcept
    : ServletInfo() {
    *this = ::std::move(from);
  }

  inline ServletInfo& operator=(const ServletInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServletInfo& operator=(ServletInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServletInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServletInfo* internal_default_instance() {
    return reinterpret_cast<const ServletInfo*>(
               &_ServletInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServletInfo& a, ServletInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServletInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServletInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServletInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServletInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServletInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServletInfo& from) {
    ServletInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServletInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.ServletInfo";
  }
  protected:
  explicit ServletInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServletNameFieldNumber = 2,
    kZoneFieldNumber = 3,
    kAppNameFieldNumber = 5,
    kColorFieldNumber = 7,
    kEnvFieldNumber = 12,
    kAddressFieldNumber = 13,
    kServletIdFieldNumber = 1,
    kZoneIdFieldNumber = 4,
    kAppIdFieldNumber = 6,
    kDeletedFieldNumber = 9,
    kCtimeFieldNumber = 10,
    kMtimeFieldNumber = 11,
    kStatusFieldNumber = 8,
  };
  // required string servlet_name = 2;
  bool has_servlet_name() const;
  private:
  bool _internal_has_servlet_name() const;
  public:
  void clear_servlet_name();
  const std::string& servlet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servlet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servlet_name();
  PROTOBUF_NODISCARD std::string* release_servlet_name();
  void set_allocated_servlet_name(std::string* servlet_name);
  private:
  const std::string& _internal_servlet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servlet_name(const std::string& value);
  std::string* _internal_mutable_servlet_name();
  public:

  // required string zone = 3;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // required string app_name = 5;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string color = 7;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required string env = 12;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const std::string& env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_env();
  PROTOBUF_NODISCARD std::string* release_env();
  void set_allocated_env(std::string* env);
  private:
  const std::string& _internal_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_env(const std::string& value);
  std::string* _internal_mutable_env();
  public:

  // required string address = 13;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional int64 servlet_id = 1;
  bool has_servlet_id() const;
  private:
  bool _internal_has_servlet_id() const;
  public:
  void clear_servlet_id();
  int64_t servlet_id() const;
  void set_servlet_id(int64_t value);
  private:
  int64_t _internal_servlet_id() const;
  void _internal_set_servlet_id(int64_t value);
  public:

  // optional int64 zone_id = 4;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int64_t zone_id() const;
  void set_zone_id(int64_t value);
  private:
  int64_t _internal_zone_id() const;
  void _internal_set_zone_id(int64_t value);
  public:

  // optional int64 app_id = 6;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_app_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // optional bool deleted = 9;
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // optional uint32 ctime = 10;
  bool has_ctime() const;
  private:
  bool _internal_has_ctime() const;
  public:
  void clear_ctime();
  uint32_t ctime() const;
  void set_ctime(uint32_t value);
  private:
  uint32_t _internal_ctime() const;
  void _internal_set_ctime(uint32_t value);
  public:

  // optional uint32 mtime = 11;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  uint32_t mtime() const;
  void set_mtime(uint32_t value);
  private:
  uint32_t _internal_mtime() const;
  void _internal_set_mtime(uint32_t value);
  public:

  // optional .sirius.proto.Status status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::sirius::proto::Status status() const;
  void set_status(::sirius::proto::Status value);
  private:
  ::sirius::proto::Status _internal_status() const;
  void _internal_set_status(::sirius::proto::Status value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.ServletInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servlet_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int64_t servlet_id_;
    int64_t zone_id_;
    int64_t app_id_;
    bool deleted_;
    uint32_t ctime_;
    uint32_t mtime_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class ServletNamingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.ServletNamingRequest) */ {
 public:
  inline ServletNamingRequest() : ServletNamingRequest(nullptr) {}
  ~ServletNamingRequest() override;
  explicit PROTOBUF_CONSTEXPR ServletNamingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServletNamingRequest(const ServletNamingRequest& from);
  ServletNamingRequest(ServletNamingRequest&& from) noexcept
    : ServletNamingRequest() {
    *this = ::std::move(from);
  }

  inline ServletNamingRequest& operator=(const ServletNamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServletNamingRequest& operator=(ServletNamingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServletNamingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServletNamingRequest* internal_default_instance() {
    return reinterpret_cast<const ServletNamingRequest*>(
               &_ServletNamingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServletNamingRequest& a, ServletNamingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServletNamingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServletNamingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServletNamingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServletNamingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServletNamingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServletNamingRequest& from) {
    ServletNamingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServletNamingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.ServletNamingRequest";
  }
  protected:
  explicit ServletNamingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZonesFieldNumber = 3,
    kEnvFieldNumber = 5,
    kColorFieldNumber = 6,
    kAppNameFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kZoneIdFieldNumber = 4,
  };
  // repeated string zones = 3;
  int zones_size() const;
  private:
  int _internal_zones_size() const;
  public:
  void clear_zones();
  const std::string& zones(int index) const;
  std::string* mutable_zones(int index);
  void set_zones(int index, const std::string& value);
  void set_zones(int index, std::string&& value);
  void set_zones(int index, const char* value);
  void set_zones(int index, const char* value, size_t size);
  std::string* add_zones();
  void add_zones(const std::string& value);
  void add_zones(std::string&& value);
  void add_zones(const char* value);
  void add_zones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& zones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_zones();
  private:
  const std::string& _internal_zones(int index) const;
  std::string* _internal_add_zones();
  public:

  // repeated string env = 5;
  int env_size() const;
  private:
  int _internal_env_size() const;
  public:
  void clear_env();
  const std::string& env(int index) const;
  std::string* mutable_env(int index);
  void set_env(int index, const std::string& value);
  void set_env(int index, std::string&& value);
  void set_env(int index, const char* value);
  void set_env(int index, const char* value, size_t size);
  std::string* add_env();
  void add_env(const std::string& value);
  void add_env(std::string&& value);
  void add_env(const char* value);
  void add_env(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& env() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_env();
  private:
  const std::string& _internal_env(int index) const;
  std::string* _internal_add_env();
  public:

  // repeated string color = 6;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  const std::string& color(int index) const;
  std::string* mutable_color(int index);
  void set_color(int index, const std::string& value);
  void set_color(int index, std::string&& value);
  void set_color(int index, const char* value);
  void set_color(int index, const char* value, size_t size);
  std::string* add_color();
  void add_color(const std::string& value);
  void add_color(std::string&& value);
  void add_color(const char* value);
  void add_color(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_color();
  private:
  const std::string& _internal_color(int index) const;
  std::string* _internal_add_color();
  public:

  // required string app_name = 1;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional int64 app_id = 2;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_app_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // optional int64 zone_id = 4;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int64_t zone_id() const;
  void set_zone_id(int64_t value);
  private:
  int64_t _internal_zone_id() const;
  void _internal_set_zone_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.ServletNamingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> zones_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> env_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    int64_t app_id_;
    int64_t zone_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class ServletNamingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.ServletNamingResponse) */ {
 public:
  inline ServletNamingResponse() : ServletNamingResponse(nullptr) {}
  ~ServletNamingResponse() override;
  explicit PROTOBUF_CONSTEXPR ServletNamingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServletNamingResponse(const ServletNamingResponse& from);
  ServletNamingResponse(ServletNamingResponse&& from) noexcept
    : ServletNamingResponse() {
    *this = ::std::move(from);
  }

  inline ServletNamingResponse& operator=(const ServletNamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServletNamingResponse& operator=(ServletNamingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServletNamingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServletNamingResponse* internal_default_instance() {
    return reinterpret_cast<const ServletNamingResponse*>(
               &_ServletNamingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServletNamingResponse& a, ServletNamingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServletNamingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServletNamingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServletNamingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServletNamingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServletNamingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServletNamingResponse& from) {
    ServletNamingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServletNamingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.ServletNamingResponse";
  }
  protected:
  explicit ServletNamingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServletsFieldNumber = 4,
    kErrmsgFieldNumber = 2,
    kLeaderFieldNumber = 3,
    kErrcodeFieldNumber = 1,
  };
  // repeated .sirius.proto.ServletInfo servlets = 4;
  int servlets_size() const;
  private:
  int _internal_servlets_size() const;
  public:
  void clear_servlets();
  ::sirius::proto::ServletInfo* mutable_servlets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >*
      mutable_servlets();
  private:
  const ::sirius::proto::ServletInfo& _internal_servlets(int index) const;
  ::sirius::proto::ServletInfo* _internal_add_servlets();
  public:
  const ::sirius::proto::ServletInfo& servlets(int index) const;
  ::sirius::proto::ServletInfo* add_servlets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >&
      servlets() const;

  // optional string errmsg = 2;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string leader = 3;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  PROTOBUF_NODISCARD std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // required .sirius.proto.ErrCode errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.ServletNamingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo > servlets_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
    int errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryManagerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.DiscoveryManagerRequest) */ {
 public:
  inline DiscoveryManagerRequest() : DiscoveryManagerRequest(nullptr) {}
  ~DiscoveryManagerRequest() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryManagerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryManagerRequest(const DiscoveryManagerRequest& from);
  DiscoveryManagerRequest(DiscoveryManagerRequest&& from) noexcept
    : DiscoveryManagerRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveryManagerRequest& operator=(const DiscoveryManagerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryManagerRequest& operator=(DiscoveryManagerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryManagerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryManagerRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveryManagerRequest*>(
               &_DiscoveryManagerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DiscoveryManagerRequest& a, DiscoveryManagerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryManagerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryManagerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryManagerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryManagerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryManagerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryManagerRequest& from) {
    DiscoveryManagerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryManagerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.DiscoveryManagerRequest";
  }
  protected:
  explicit DiscoveryManagerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceTagsFieldNumber = 5,
    kAppInfoFieldNumber = 2,
    kUserPrivilegeFieldNumber = 3,
    kAutoIncrementFieldNumber = 4,
    kConfigInfoFieldNumber = 6,
    kZoneInfoFieldNumber = 7,
    kServletInfoFieldNumber = 8,
    kOpTypeFieldNumber = 1,
  };
  // repeated string resource_tags = 5;
  int resource_tags_size() const;
  private:
  int _internal_resource_tags_size() const;
  public:
  void clear_resource_tags();
  const std::string& resource_tags(int index) const;
  std::string* mutable_resource_tags(int index);
  void set_resource_tags(int index, const std::string& value);
  void set_resource_tags(int index, std::string&& value);
  void set_resource_tags(int index, const char* value);
  void set_resource_tags(int index, const char* value, size_t size);
  std::string* add_resource_tags();
  void add_resource_tags(const std::string& value);
  void add_resource_tags(std::string&& value);
  void add_resource_tags(const char* value);
  void add_resource_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_tags();
  private:
  const std::string& _internal_resource_tags(int index) const;
  std::string* _internal_add_resource_tags();
  public:

  // optional .sirius.proto.AppInfo app_info = 2;
  bool has_app_info() const;
  private:
  bool _internal_has_app_info() const;
  public:
  void clear_app_info();
  const ::sirius::proto::AppInfo& app_info() const;
  PROTOBUF_NODISCARD ::sirius::proto::AppInfo* release_app_info();
  ::sirius::proto::AppInfo* mutable_app_info();
  void set_allocated_app_info(::sirius::proto::AppInfo* app_info);
  private:
  const ::sirius::proto::AppInfo& _internal_app_info() const;
  ::sirius::proto::AppInfo* _internal_mutable_app_info();
  public:
  void unsafe_arena_set_allocated_app_info(
      ::sirius::proto::AppInfo* app_info);
  ::sirius::proto::AppInfo* unsafe_arena_release_app_info();

  // optional .sirius.proto.UserPrivilege user_privilege = 3;
  bool has_user_privilege() const;
  private:
  bool _internal_has_user_privilege() const;
  public:
  void clear_user_privilege();
  const ::sirius::proto::UserPrivilege& user_privilege() const;
  PROTOBUF_NODISCARD ::sirius::proto::UserPrivilege* release_user_privilege();
  ::sirius::proto::UserPrivilege* mutable_user_privilege();
  void set_allocated_user_privilege(::sirius::proto::UserPrivilege* user_privilege);
  private:
  const ::sirius::proto::UserPrivilege& _internal_user_privilege() const;
  ::sirius::proto::UserPrivilege* _internal_mutable_user_privilege();
  public:
  void unsafe_arena_set_allocated_user_privilege(
      ::sirius::proto::UserPrivilege* user_privilege);
  ::sirius::proto::UserPrivilege* unsafe_arena_release_user_privilege();

  // optional .sirius.proto.AutoIncrementRequest auto_increment = 4;
  bool has_auto_increment() const;
  private:
  bool _internal_has_auto_increment() const;
  public:
  void clear_auto_increment();
  const ::sirius::proto::AutoIncrementRequest& auto_increment() const;
  PROTOBUF_NODISCARD ::sirius::proto::AutoIncrementRequest* release_auto_increment();
  ::sirius::proto::AutoIncrementRequest* mutable_auto_increment();
  void set_allocated_auto_increment(::sirius::proto::AutoIncrementRequest* auto_increment);
  private:
  const ::sirius::proto::AutoIncrementRequest& _internal_auto_increment() const;
  ::sirius::proto::AutoIncrementRequest* _internal_mutable_auto_increment();
  public:
  void unsafe_arena_set_allocated_auto_increment(
      ::sirius::proto::AutoIncrementRequest* auto_increment);
  ::sirius::proto::AutoIncrementRequest* unsafe_arena_release_auto_increment();

  // optional .sirius.proto.ConfigInfo config_info = 6;
  bool has_config_info() const;
  private:
  bool _internal_has_config_info() const;
  public:
  void clear_config_info();
  const ::sirius::proto::ConfigInfo& config_info() const;
  PROTOBUF_NODISCARD ::sirius::proto::ConfigInfo* release_config_info();
  ::sirius::proto::ConfigInfo* mutable_config_info();
  void set_allocated_config_info(::sirius::proto::ConfigInfo* config_info);
  private:
  const ::sirius::proto::ConfigInfo& _internal_config_info() const;
  ::sirius::proto::ConfigInfo* _internal_mutable_config_info();
  public:
  void unsafe_arena_set_allocated_config_info(
      ::sirius::proto::ConfigInfo* config_info);
  ::sirius::proto::ConfigInfo* unsafe_arena_release_config_info();

  // optional .sirius.proto.ZoneInfo zone_info = 7;
  bool has_zone_info() const;
  private:
  bool _internal_has_zone_info() const;
  public:
  void clear_zone_info();
  const ::sirius::proto::ZoneInfo& zone_info() const;
  PROTOBUF_NODISCARD ::sirius::proto::ZoneInfo* release_zone_info();
  ::sirius::proto::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::sirius::proto::ZoneInfo* zone_info);
  private:
  const ::sirius::proto::ZoneInfo& _internal_zone_info() const;
  ::sirius::proto::ZoneInfo* _internal_mutable_zone_info();
  public:
  void unsafe_arena_set_allocated_zone_info(
      ::sirius::proto::ZoneInfo* zone_info);
  ::sirius::proto::ZoneInfo* unsafe_arena_release_zone_info();

  // optional .sirius.proto.ServletInfo servlet_info = 8;
  bool has_servlet_info() const;
  private:
  bool _internal_has_servlet_info() const;
  public:
  void clear_servlet_info();
  const ::sirius::proto::ServletInfo& servlet_info() const;
  PROTOBUF_NODISCARD ::sirius::proto::ServletInfo* release_servlet_info();
  ::sirius::proto::ServletInfo* mutable_servlet_info();
  void set_allocated_servlet_info(::sirius::proto::ServletInfo* servlet_info);
  private:
  const ::sirius::proto::ServletInfo& _internal_servlet_info() const;
  ::sirius::proto::ServletInfo* _internal_mutable_servlet_info();
  public:
  void unsafe_arena_set_allocated_servlet_info(
      ::sirius::proto::ServletInfo* servlet_info);
  ::sirius::proto::ServletInfo* unsafe_arena_release_servlet_info();

  // required .sirius.proto.OpType op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::OpType op_type() const;
  void set_op_type(::sirius::proto::OpType value);
  private:
  ::sirius::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::OpType value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.DiscoveryManagerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_tags_;
    ::sirius::proto::AppInfo* app_info_;
    ::sirius::proto::UserPrivilege* user_privilege_;
    ::sirius::proto::AutoIncrementRequest* auto_increment_;
    ::sirius::proto::ConfigInfo* config_info_;
    ::sirius::proto::ZoneInfo* zone_info_;
    ::sirius::proto::ServletInfo* servlet_info_;
    int op_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.DiscoveryRegisterResponse) */ {
 public:
  inline DiscoveryRegisterResponse() : DiscoveryRegisterResponse(nullptr) {}
  ~DiscoveryRegisterResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryRegisterResponse(const DiscoveryRegisterResponse& from);
  DiscoveryRegisterResponse(DiscoveryRegisterResponse&& from) noexcept
    : DiscoveryRegisterResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryRegisterResponse& operator=(const DiscoveryRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryRegisterResponse& operator=(DiscoveryRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryRegisterResponse*>(
               &_DiscoveryRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscoveryRegisterResponse& a, DiscoveryRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryRegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryRegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryRegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryRegisterResponse& from) {
    DiscoveryRegisterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryRegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.DiscoveryRegisterResponse";
  }
  protected:
  explicit DiscoveryRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // optional string errmsg = 2;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // required .sirius.proto.ErrCode errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.DiscoveryRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryManagerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.DiscoveryManagerResponse) */ {
 public:
  inline DiscoveryManagerResponse() : DiscoveryManagerResponse(nullptr) {}
  ~DiscoveryManagerResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryManagerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryManagerResponse(const DiscoveryManagerResponse& from);
  DiscoveryManagerResponse(DiscoveryManagerResponse&& from) noexcept
    : DiscoveryManagerResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryManagerResponse& operator=(const DiscoveryManagerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryManagerResponse& operator=(DiscoveryManagerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryManagerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryManagerResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryManagerResponse*>(
               &_DiscoveryManagerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DiscoveryManagerResponse& a, DiscoveryManagerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryManagerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryManagerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryManagerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryManagerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryManagerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryManagerResponse& from) {
    DiscoveryManagerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryManagerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.DiscoveryManagerResponse";
  }
  protected:
  explicit DiscoveryManagerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kLeaderFieldNumber = 3,
    kErrcodeFieldNumber = 1,
    kOpTypeFieldNumber = 5,
    kStartIdFieldNumber = 6,
    kEndIdFieldNumber = 7,
  };
  // optional string errmsg = 2;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string leader = 3;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  PROTOBUF_NODISCARD std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // required .sirius.proto.ErrCode errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // optional .sirius.proto.OpType op_type = 5;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::OpType op_type() const;
  void set_op_type(::sirius::proto::OpType value);
  private:
  ::sirius::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::OpType value);
  public:

  // optional uint64 start_id = 6;
  bool has_start_id() const;
  private:
  bool _internal_has_start_id() const;
  public:
  void clear_start_id();
  uint64_t start_id() const;
  void set_start_id(uint64_t value);
  private:
  uint64_t _internal_start_id() const;
  void _internal_set_start_id(uint64_t value);
  public:

  // optional uint64 end_id = 7;
  bool has_end_id() const;
  private:
  bool _internal_has_end_id() const;
  public:
  void clear_end_id();
  uint64_t end_id() const;
  void set_end_id(uint64_t value);
  private:
  uint64_t _internal_end_id() const;
  void _internal_set_end_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.DiscoveryManagerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
    int errcode_;
    int op_type_;
    uint64_t start_id_;
    uint64_t end_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.DiscoveryQueryRequest) */ {
 public:
  inline DiscoveryQueryRequest() : DiscoveryQueryRequest(nullptr) {}
  ~DiscoveryQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryQueryRequest(const DiscoveryQueryRequest& from);
  DiscoveryQueryRequest(DiscoveryQueryRequest&& from) noexcept
    : DiscoveryQueryRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveryQueryRequest& operator=(const DiscoveryQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryQueryRequest& operator=(DiscoveryQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryQueryRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveryQueryRequest*>(
               &_DiscoveryQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DiscoveryQueryRequest& a, DiscoveryQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryQueryRequest& from) {
    DiscoveryQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.DiscoveryQueryRequest";
  }
  protected:
  explicit DiscoveryQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceAddressFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kAppNameFieldNumber = 4,
    kConfigNameFieldNumber = 5,
    kZoneFieldNumber = 7,
    kServletFieldNumber = 8,
    kColorFieldNumber = 9,
    kEnvFieldNumber = 11,
    kConfigVersionFieldNumber = 6,
    kOpTypeFieldNumber = 1,
    kStatusFieldNumber = 10,
  };
  // optional string instance_address = 2;
  bool has_instance_address() const;
  private:
  bool _internal_has_instance_address() const;
  public:
  void clear_instance_address();
  const std::string& instance_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_address();
  PROTOBUF_NODISCARD std::string* release_instance_address();
  void set_allocated_instance_address(std::string* instance_address);
  private:
  const std::string& _internal_instance_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_address(const std::string& value);
  std::string* _internal_mutable_instance_address();
  public:

  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string app_name = 4;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string config_name = 5;
  bool has_config_name() const;
  private:
  bool _internal_has_config_name() const;
  public:
  void clear_config_name();
  const std::string& config_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_name();
  PROTOBUF_NODISCARD std::string* release_config_name();
  void set_allocated_config_name(std::string* config_name);
  private:
  const std::string& _internal_config_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_name(const std::string& value);
  std::string* _internal_mutable_config_name();
  public:

  // optional string zone = 7;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // optional string servlet = 8;
  bool has_servlet() const;
  private:
  bool _internal_has_servlet() const;
  public:
  void clear_servlet();
  const std::string& servlet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servlet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servlet();
  PROTOBUF_NODISCARD std::string* release_servlet();
  void set_allocated_servlet(std::string* servlet);
  private:
  const std::string& _internal_servlet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servlet(const std::string& value);
  std::string* _internal_mutable_servlet();
  public:

  // optional string color = 9;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional string env = 11;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const std::string& env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_env();
  PROTOBUF_NODISCARD std::string* release_env();
  void set_allocated_env(std::string* env);
  private:
  const std::string& _internal_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_env(const std::string& value);
  std::string* _internal_mutable_env();
  public:

  // optional .sirius.proto.Version config_version = 6;
  bool has_config_version() const;
  private:
  bool _internal_has_config_version() const;
  public:
  void clear_config_version();
  const ::sirius::proto::Version& config_version() const;
  PROTOBUF_NODISCARD ::sirius::proto::Version* release_config_version();
  ::sirius::proto::Version* mutable_config_version();
  void set_allocated_config_version(::sirius::proto::Version* config_version);
  private:
  const ::sirius::proto::Version& _internal_config_version() const;
  ::sirius::proto::Version* _internal_mutable_config_version();
  public:
  void unsafe_arena_set_allocated_config_version(
      ::sirius::proto::Version* config_version);
  ::sirius::proto::Version* unsafe_arena_release_config_version();

  // required .sirius.proto.QueryOpType op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::QueryOpType op_type() const;
  void set_op_type(::sirius::proto::QueryOpType value);
  private:
  ::sirius::proto::QueryOpType _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::QueryOpType value);
  public:

  // optional .sirius.proto.Status status = 10;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::sirius::proto::Status status() const;
  void set_status(::sirius::proto::Status value);
  private:
  ::sirius::proto::Status _internal_status() const;
  void _internal_set_status(::sirius::proto::Status value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.DiscoveryQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servlet_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_;
    ::sirius::proto::Version* config_version_;
    int op_type_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.DiscoveryQueryResponse) */ {
 public:
  inline DiscoveryQueryResponse() : DiscoveryQueryResponse(nullptr) {}
  ~DiscoveryQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryQueryResponse(const DiscoveryQueryResponse& from);
  DiscoveryQueryResponse(DiscoveryQueryResponse&& from) noexcept
    : DiscoveryQueryResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryQueryResponse& operator=(const DiscoveryQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryQueryResponse& operator=(DiscoveryQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryQueryResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryQueryResponse*>(
               &_DiscoveryQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DiscoveryQueryResponse& a, DiscoveryQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoveryQueryResponse& from) {
    DiscoveryQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.DiscoveryQueryResponse";
  }
  protected:
  explicit DiscoveryQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPrivilegeFieldNumber = 4,
    kAppInfosFieldNumber = 5,
    kFlattenInstancesFieldNumber = 6,
    kFlattenPrivilegesFieldNumber = 7,
    kPeerIdsFieldNumber = 8,
    kZoneInfosFieldNumber = 9,
    kServletInfosFieldNumber = 10,
    kConfigInfosFieldNumber = 11,
    kErrmsgFieldNumber = 2,
    kLeaderFieldNumber = 3,
    kErrcodeFieldNumber = 1,
  };
  // repeated .sirius.proto.UserPrivilege user_privilege = 4;
  int user_privilege_size() const;
  private:
  int _internal_user_privilege_size() const;
  public:
  void clear_user_privilege();
  ::sirius::proto::UserPrivilege* mutable_user_privilege(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::UserPrivilege >*
      mutable_user_privilege();
  private:
  const ::sirius::proto::UserPrivilege& _internal_user_privilege(int index) const;
  ::sirius::proto::UserPrivilege* _internal_add_user_privilege();
  public:
  const ::sirius::proto::UserPrivilege& user_privilege(int index) const;
  ::sirius::proto::UserPrivilege* add_user_privilege();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::UserPrivilege >&
      user_privilege() const;

  // repeated .sirius.proto.AppInfo app_infos = 5;
  int app_infos_size() const;
  private:
  int _internal_app_infos_size() const;
  public:
  void clear_app_infos();
  ::sirius::proto::AppInfo* mutable_app_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::AppInfo >*
      mutable_app_infos();
  private:
  const ::sirius::proto::AppInfo& _internal_app_infos(int index) const;
  ::sirius::proto::AppInfo* _internal_add_app_infos();
  public:
  const ::sirius::proto::AppInfo& app_infos(int index) const;
  ::sirius::proto::AppInfo* add_app_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::AppInfo >&
      app_infos() const;

  // repeated .sirius.proto.QueryInstance flatten_instances = 6;
  int flatten_instances_size() const;
  private:
  int _internal_flatten_instances_size() const;
  public:
  void clear_flatten_instances();
  ::sirius::proto::QueryInstance* mutable_flatten_instances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryInstance >*
      mutable_flatten_instances();
  private:
  const ::sirius::proto::QueryInstance& _internal_flatten_instances(int index) const;
  ::sirius::proto::QueryInstance* _internal_add_flatten_instances();
  public:
  const ::sirius::proto::QueryInstance& flatten_instances(int index) const;
  ::sirius::proto::QueryInstance* add_flatten_instances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryInstance >&
      flatten_instances() const;

  // repeated .sirius.proto.QueryUserPrivilege flatten_privileges = 7;
  int flatten_privileges_size() const;
  private:
  int _internal_flatten_privileges_size() const;
  public:
  void clear_flatten_privileges();
  ::sirius::proto::QueryUserPrivilege* mutable_flatten_privileges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryUserPrivilege >*
      mutable_flatten_privileges();
  private:
  const ::sirius::proto::QueryUserPrivilege& _internal_flatten_privileges(int index) const;
  ::sirius::proto::QueryUserPrivilege* _internal_add_flatten_privileges();
  public:
  const ::sirius::proto::QueryUserPrivilege& flatten_privileges(int index) const;
  ::sirius::proto::QueryUserPrivilege* add_flatten_privileges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryUserPrivilege >&
      flatten_privileges() const;

  // repeated int64 peer_ids = 8;
  int peer_ids_size() const;
  private:
  int _internal_peer_ids_size() const;
  public:
  void clear_peer_ids();
  private:
  int64_t _internal_peer_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_peer_ids() const;
  void _internal_add_peer_ids(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_peer_ids();
  public:
  int64_t peer_ids(int index) const;
  void set_peer_ids(int index, int64_t value);
  void add_peer_ids(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      peer_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_peer_ids();

  // repeated .sirius.proto.ZoneInfo zone_infos = 9;
  int zone_infos_size() const;
  private:
  int _internal_zone_infos_size() const;
  public:
  void clear_zone_infos();
  ::sirius::proto::ZoneInfo* mutable_zone_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ZoneInfo >*
      mutable_zone_infos();
  private:
  const ::sirius::proto::ZoneInfo& _internal_zone_infos(int index) const;
  ::sirius::proto::ZoneInfo* _internal_add_zone_infos();
  public:
  const ::sirius::proto::ZoneInfo& zone_infos(int index) const;
  ::sirius::proto::ZoneInfo* add_zone_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ZoneInfo >&
      zone_infos() const;

  // repeated .sirius.proto.ServletInfo servlet_infos = 10;
  int servlet_infos_size() const;
  private:
  int _internal_servlet_infos_size() const;
  public:
  void clear_servlet_infos();
  ::sirius::proto::ServletInfo* mutable_servlet_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >*
      mutable_servlet_infos();
  private:
  const ::sirius::proto::ServletInfo& _internal_servlet_infos(int index) const;
  ::sirius::proto::ServletInfo* _internal_add_servlet_infos();
  public:
  const ::sirius::proto::ServletInfo& servlet_infos(int index) const;
  ::sirius::proto::ServletInfo* add_servlet_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >&
      servlet_infos() const;

  // repeated .sirius.proto.ConfigInfo config_infos = 11;
  int config_infos_size() const;
  private:
  int _internal_config_infos_size() const;
  public:
  void clear_config_infos();
  ::sirius::proto::ConfigInfo* mutable_config_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ConfigInfo >*
      mutable_config_infos();
  private:
  const ::sirius::proto::ConfigInfo& _internal_config_infos(int index) const;
  ::sirius::proto::ConfigInfo* _internal_add_config_infos();
  public:
  const ::sirius::proto::ConfigInfo& config_infos(int index) const;
  ::sirius::proto::ConfigInfo* add_config_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ConfigInfo >&
      config_infos() const;

  // optional string errmsg = 2;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string leader = 3;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  PROTOBUF_NODISCARD std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // required .sirius.proto.ErrCode errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.DiscoveryQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::UserPrivilege > user_privilege_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::AppInfo > app_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryInstance > flatten_instances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryUserPrivilege > flatten_privileges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > peer_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ZoneInfo > zone_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo > servlet_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ConfigInfo > config_infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
    int errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class QueryUserPrivilege final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.QueryUserPrivilege) */ {
 public:
  inline QueryUserPrivilege() : QueryUserPrivilege(nullptr) {}
  ~QueryUserPrivilege() override;
  explicit PROTOBUF_CONSTEXPR QueryUserPrivilege(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserPrivilege(const QueryUserPrivilege& from);
  QueryUserPrivilege(QueryUserPrivilege&& from) noexcept
    : QueryUserPrivilege() {
    *this = ::std::move(from);
  }

  inline QueryUserPrivilege& operator=(const QueryUserPrivilege& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserPrivilege& operator=(QueryUserPrivilege&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserPrivilege& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserPrivilege* internal_default_instance() {
    return reinterpret_cast<const QueryUserPrivilege*>(
               &_QueryUserPrivilege_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryUserPrivilege& a, QueryUserPrivilege& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserPrivilege* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserPrivilege* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserPrivilege* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserPrivilege>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserPrivilege& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUserPrivilege& from) {
    QueryUserPrivilege::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserPrivilege* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.QueryUserPrivilege";
  }
  protected:
  explicit QueryUserPrivilege(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAppNameFieldNumber = 2,
    kPrivilegeFieldNumber = 3,
    kPasswordFieldNumber = 5,
    kServletRwFieldNumber = 4,
  };
  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // required string app_name = 2;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // required string privilege = 3;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  const std::string& privilege() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_privilege(ArgT0&& arg0, ArgT... args);
  std::string* mutable_privilege();
  PROTOBUF_NODISCARD std::string* release_privilege();
  void set_allocated_privilege(std::string* privilege);
  private:
  const std::string& _internal_privilege() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_privilege(const std::string& value);
  std::string* _internal_mutable_privilege();
  public:

  // optional string password = 5;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required .sirius.proto.RW servlet_rw = 4;
  bool has_servlet_rw() const;
  private:
  bool _internal_has_servlet_rw() const;
  public:
  void clear_servlet_rw();
  ::sirius::proto::RW servlet_rw() const;
  void set_servlet_rw(::sirius::proto::RW value);
  private:
  ::sirius::proto::RW _internal_servlet_rw() const;
  void _internal_set_servlet_rw(::sirius::proto::RW value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.QueryUserPrivilege)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privilege_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    int servlet_rw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// -------------------------------------------------------------------

class QueryInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.QueryInstance) */ {
 public:
  inline QueryInstance() : QueryInstance(nullptr) {}
  ~QueryInstance() override;
  explicit PROTOBUF_CONSTEXPR QueryInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInstance(const QueryInstance& from);
  QueryInstance(QueryInstance&& from) noexcept
    : QueryInstance() {
    *this = ::std::move(from);
  }

  inline QueryInstance& operator=(const QueryInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInstance& operator=(QueryInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInstance* internal_default_instance() {
    return reinterpret_cast<const QueryInstance*>(
               &_QueryInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryInstance& a, QueryInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryInstance& from) {
    QueryInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.QueryInstance";
  }
  protected:
  explicit QueryInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAppNameFieldNumber = 2,
    kZoneNameFieldNumber = 3,
    kServletNameFieldNumber = 4,
    kEnvFieldNumber = 5,
    kColorFieldNumber = 6,
    kVersionFieldNumber = 7,
    kStatusFieldNumber = 8,
  };
  // required string address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional string app_name = 2;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string zone_name = 3;
  bool has_zone_name() const;
  private:
  bool _internal_has_zone_name() const;
  public:
  void clear_zone_name();
  const std::string& zone_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_name();
  PROTOBUF_NODISCARD std::string* release_zone_name();
  void set_allocated_zone_name(std::string* zone_name);
  private:
  const std::string& _internal_zone_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_name(const std::string& value);
  std::string* _internal_mutable_zone_name();
  public:

  // optional string servlet_name = 4;
  bool has_servlet_name() const;
  private:
  bool _internal_has_servlet_name() const;
  public:
  void clear_servlet_name();
  const std::string& servlet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servlet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servlet_name();
  PROTOBUF_NODISCARD std::string* release_servlet_name();
  void set_allocated_servlet_name(std::string* servlet_name);
  private:
  const std::string& _internal_servlet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servlet_name(const std::string& value);
  std::string* _internal_mutable_servlet_name();
  public:

  // optional string env = 5;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const std::string& env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_env();
  PROTOBUF_NODISCARD std::string* release_env();
  void set_allocated_env(std::string* env);
  private:
  const std::string& _internal_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_env(const std::string& value);
  std::string* _internal_mutable_env();
  public:

  // optional string color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional int64 version = 7;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional .sirius.proto.Status status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::sirius::proto::Status status() const;
  void set_status(::sirius::proto::Status value);
  private:
  ::sirius::proto::Status _internal_status() const;
  void _internal_set_status(::sirius::proto::Status value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.QueryInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servlet_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    int64_t version_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fdiscovery_2estruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppInfo

// required string app_name = 1;
inline bool AppInfo::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AppInfo::has_app_name() const {
  return _internal_has_app_name();
}
inline void AppInfo::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppInfo::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AppInfo.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.AppInfo.app_name)
}
inline std::string* AppInfo::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.AppInfo.app_name)
  return _s;
}
inline const std::string& AppInfo::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void AppInfo::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* AppInfo::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.AppInfo.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AppInfo::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.AppInfo.app_name)
}

// optional int64 app_id = 2;
inline bool AppInfo::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AppInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void AppInfo::clear_app_id() {
  _impl_.app_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t AppInfo::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int64_t AppInfo::app_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AppInfo.app_id)
  return _internal_app_id();
}
inline void AppInfo::_internal_set_app_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void AppInfo::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AppInfo.app_id)
}

// optional int64 quota = 3;
inline bool AppInfo::_internal_has_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AppInfo::has_quota() const {
  return _internal_has_quota();
}
inline void AppInfo::clear_quota() {
  _impl_.quota_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t AppInfo::_internal_quota() const {
  return _impl_.quota_;
}
inline int64_t AppInfo::quota() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AppInfo.quota)
  return _internal_quota();
}
inline void AppInfo::_internal_set_quota(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.quota_ = value;
}
inline void AppInfo::set_quota(int64_t value) {
  _internal_set_quota(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AppInfo.quota)
}

// optional int64 version = 4;
inline bool AppInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AppInfo::has_version() const {
  return _internal_has_version();
}
inline void AppInfo::clear_version() {
  _impl_.version_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t AppInfo::_internal_version() const {
  return _impl_.version_;
}
inline int64_t AppInfo::version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AppInfo.version)
  return _internal_version();
}
inline void AppInfo::_internal_set_version(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version_ = value;
}
inline void AppInfo::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AppInfo.version)
}

// optional bool deleted = 5;
inline bool AppInfo::_internal_has_deleted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AppInfo::has_deleted() const {
  return _internal_has_deleted();
}
inline void AppInfo::clear_deleted() {
  _impl_.deleted_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool AppInfo::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool AppInfo::deleted() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AppInfo.deleted)
  return _internal_deleted();
}
inline void AppInfo::_internal_set_deleted(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.deleted_ = value;
}
inline void AppInfo::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AppInfo.deleted)
}

// -------------------------------------------------------------------

// ZoneInfo

// required string zone = 1;
inline bool ZoneInfo::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ZoneInfo::has_zone() const {
  return _internal_has_zone();
}
inline void ZoneInfo::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ZoneInfo::zone() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZoneInfo::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.zone)
}
inline std::string* ZoneInfo::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ZoneInfo.zone)
  return _s;
}
inline const std::string& ZoneInfo::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void ZoneInfo::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* ZoneInfo::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* ZoneInfo::release_zone() {
  // @@protoc_insertion_point(field_release:sirius.proto.ZoneInfo.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZoneInfo::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ZoneInfo.zone)
}

// optional int64 zone_id = 2;
inline bool ZoneInfo::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ZoneInfo::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void ZoneInfo::clear_zone_id() {
  _impl_.zone_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ZoneInfo::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int64_t ZoneInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.zone_id)
  return _internal_zone_id();
}
inline void ZoneInfo::_internal_set_zone_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zone_id_ = value;
}
inline void ZoneInfo::set_zone_id(int64_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.zone_id)
}

// required string app_name = 3;
inline bool ZoneInfo::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ZoneInfo::has_app_name() const {
  return _internal_has_app_name();
}
inline void ZoneInfo::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ZoneInfo::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZoneInfo::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.app_name)
}
inline std::string* ZoneInfo::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ZoneInfo.app_name)
  return _s;
}
inline const std::string& ZoneInfo::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void ZoneInfo::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ZoneInfo::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ZoneInfo::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.ZoneInfo.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ZoneInfo::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ZoneInfo.app_name)
}

// optional int64 app_id = 4;
inline bool ZoneInfo::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ZoneInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void ZoneInfo::clear_app_id() {
  _impl_.app_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t ZoneInfo::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int64_t ZoneInfo::app_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.app_id)
  return _internal_app_id();
}
inline void ZoneInfo::_internal_set_app_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.app_id_ = value;
}
inline void ZoneInfo::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.app_id)
}

// optional int64 quota = 5;
inline bool ZoneInfo::_internal_has_quota() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ZoneInfo::has_quota() const {
  return _internal_has_quota();
}
inline void ZoneInfo::clear_quota() {
  _impl_.quota_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t ZoneInfo::_internal_quota() const {
  return _impl_.quota_;
}
inline int64_t ZoneInfo::quota() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.quota)
  return _internal_quota();
}
inline void ZoneInfo::_internal_set_quota(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.quota_ = value;
}
inline void ZoneInfo::set_quota(int64_t value) {
  _internal_set_quota(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.quota)
}

// optional int64 version = 6;
inline bool ZoneInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ZoneInfo::has_version() const {
  return _internal_has_version();
}
inline void ZoneInfo::clear_version() {
  _impl_.version_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t ZoneInfo::_internal_version() const {
  return _impl_.version_;
}
inline int64_t ZoneInfo::version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.version)
  return _internal_version();
}
inline void ZoneInfo::_internal_set_version(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.version_ = value;
}
inline void ZoneInfo::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.version)
}

// optional bool deleted = 7;
inline bool ZoneInfo::_internal_has_deleted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ZoneInfo::has_deleted() const {
  return _internal_has_deleted();
}
inline void ZoneInfo::clear_deleted() {
  _impl_.deleted_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ZoneInfo::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool ZoneInfo::deleted() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ZoneInfo.deleted)
  return _internal_deleted();
}
inline void ZoneInfo::_internal_set_deleted(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deleted_ = value;
}
inline void ZoneInfo::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ZoneInfo.deleted)
}

// -------------------------------------------------------------------

// ServletInfo

// optional int64 servlet_id = 1;
inline bool ServletInfo::_internal_has_servlet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServletInfo::has_servlet_id() const {
  return _internal_has_servlet_id();
}
inline void ServletInfo::clear_servlet_id() {
  _impl_.servlet_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t ServletInfo::_internal_servlet_id() const {
  return _impl_.servlet_id_;
}
inline int64_t ServletInfo::servlet_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.servlet_id)
  return _internal_servlet_id();
}
inline void ServletInfo::_internal_set_servlet_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.servlet_id_ = value;
}
inline void ServletInfo::set_servlet_id(int64_t value) {
  _internal_set_servlet_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.servlet_id)
}

// required string servlet_name = 2;
inline bool ServletInfo::_internal_has_servlet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServletInfo::has_servlet_name() const {
  return _internal_has_servlet_name();
}
inline void ServletInfo::clear_servlet_name() {
  _impl_.servlet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServletInfo::servlet_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.servlet_name)
  return _internal_servlet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_servlet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.servlet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.servlet_name)
}
inline std::string* ServletInfo::mutable_servlet_name() {
  std::string* _s = _internal_mutable_servlet_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.servlet_name)
  return _s;
}
inline const std::string& ServletInfo::_internal_servlet_name() const {
  return _impl_.servlet_name_.Get();
}
inline void ServletInfo::_internal_set_servlet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servlet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_servlet_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.servlet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_servlet_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.servlet_name)
  if (!_internal_has_servlet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.servlet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_servlet_name(std::string* servlet_name) {
  if (servlet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.servlet_name_.SetAllocated(servlet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.servlet_name)
}

// required string zone = 3;
inline bool ServletInfo::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServletInfo::has_zone() const {
  return _internal_has_zone();
}
inline void ServletInfo::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServletInfo::zone() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.zone)
}
inline std::string* ServletInfo::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.zone)
  return _s;
}
inline const std::string& ServletInfo::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void ServletInfo::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_zone() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.zone)
}

// optional int64 zone_id = 4;
inline bool ServletInfo::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServletInfo::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void ServletInfo::clear_zone_id() {
  _impl_.zone_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t ServletInfo::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int64_t ServletInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.zone_id)
  return _internal_zone_id();
}
inline void ServletInfo::_internal_set_zone_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.zone_id_ = value;
}
inline void ServletInfo::set_zone_id(int64_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.zone_id)
}

// required string app_name = 5;
inline bool ServletInfo::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServletInfo::has_app_name() const {
  return _internal_has_app_name();
}
inline void ServletInfo::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServletInfo::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.app_name)
}
inline std::string* ServletInfo::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.app_name)
  return _s;
}
inline const std::string& ServletInfo::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void ServletInfo::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.app_name)
}

// optional int64 app_id = 6;
inline bool ServletInfo::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServletInfo::has_app_id() const {
  return _internal_has_app_id();
}
inline void ServletInfo::clear_app_id() {
  _impl_.app_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t ServletInfo::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int64_t ServletInfo::app_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.app_id)
  return _internal_app_id();
}
inline void ServletInfo::_internal_set_app_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.app_id_ = value;
}
inline void ServletInfo::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.app_id)
}

// optional string color = 7;
inline bool ServletInfo::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServletInfo::has_color() const {
  return _internal_has_color();
}
inline void ServletInfo::clear_color() {
  _impl_.color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServletInfo::color() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_color(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.color)
}
inline std::string* ServletInfo::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.color)
  return _s;
}
inline const std::string& ServletInfo::_internal_color() const {
  return _impl_.color_.Get();
}
inline void ServletInfo::_internal_set_color(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_color() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.color)
}

// optional .sirius.proto.Status status = 8;
inline bool ServletInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ServletInfo::has_status() const {
  return _internal_has_status();
}
inline void ServletInfo::clear_status() {
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::sirius::proto::Status ServletInfo::_internal_status() const {
  return static_cast< ::sirius::proto::Status >(_impl_.status_);
}
inline ::sirius::proto::Status ServletInfo::status() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.status)
  return _internal_status();
}
inline void ServletInfo::_internal_set_status(::sirius::proto::Status value) {
  assert(::sirius::proto::Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.status_ = value;
}
inline void ServletInfo::set_status(::sirius::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.status)
}

// optional bool deleted = 9;
inline bool ServletInfo::_internal_has_deleted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ServletInfo::has_deleted() const {
  return _internal_has_deleted();
}
inline void ServletInfo::clear_deleted() {
  _impl_.deleted_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ServletInfo::_internal_deleted() const {
  return _impl_.deleted_;
}
inline bool ServletInfo::deleted() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.deleted)
  return _internal_deleted();
}
inline void ServletInfo::_internal_set_deleted(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.deleted_ = value;
}
inline void ServletInfo::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.deleted)
}

// optional uint32 ctime = 10;
inline bool ServletInfo::_internal_has_ctime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ServletInfo::has_ctime() const {
  return _internal_has_ctime();
}
inline void ServletInfo::clear_ctime() {
  _impl_.ctime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t ServletInfo::_internal_ctime() const {
  return _impl_.ctime_;
}
inline uint32_t ServletInfo::ctime() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.ctime)
  return _internal_ctime();
}
inline void ServletInfo::_internal_set_ctime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ctime_ = value;
}
inline void ServletInfo::set_ctime(uint32_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.ctime)
}

// optional uint32 mtime = 11;
inline bool ServletInfo::_internal_has_mtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ServletInfo::has_mtime() const {
  return _internal_has_mtime();
}
inline void ServletInfo::clear_mtime() {
  _impl_.mtime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t ServletInfo::_internal_mtime() const {
  return _impl_.mtime_;
}
inline uint32_t ServletInfo::mtime() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.mtime)
  return _internal_mtime();
}
inline void ServletInfo::_internal_set_mtime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.mtime_ = value;
}
inline void ServletInfo::set_mtime(uint32_t value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.mtime)
}

// required string env = 12;
inline bool ServletInfo::_internal_has_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServletInfo::has_env() const {
  return _internal_has_env();
}
inline void ServletInfo::clear_env() {
  _impl_.env_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ServletInfo::env() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.env)
  return _internal_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_env(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.env_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.env)
}
inline std::string* ServletInfo::mutable_env() {
  std::string* _s = _internal_mutable_env();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.env)
  return _s;
}
inline const std::string& ServletInfo::_internal_env() const {
  return _impl_.env_.Get();
}
inline void ServletInfo::_internal_set_env(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.env_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_env() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.env_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_env() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.env)
  if (!_internal_has_env()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.env_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_env(std::string* env) {
  if (env != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.env_.SetAllocated(env, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.env)
}

// required string address = 13;
inline bool ServletInfo::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServletInfo::has_address() const {
  return _internal_has_address();
}
inline void ServletInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ServletInfo::address() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletInfo::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletInfo.address)
}
inline std::string* ServletInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletInfo.address)
  return _s;
}
inline const std::string& ServletInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ServletInfo::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletInfo::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletInfo::release_address() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletInfo.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletInfo.address)
}

// -------------------------------------------------------------------

// ServletNamingRequest

// required string app_name = 1;
inline bool ServletNamingRequest::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServletNamingRequest::has_app_name() const {
  return _internal_has_app_name();
}
inline void ServletNamingRequest::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServletNamingRequest::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletNamingRequest::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.app_name)
}
inline std::string* ServletNamingRequest::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingRequest.app_name)
  return _s;
}
inline const std::string& ServletNamingRequest::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void ServletNamingRequest::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletNamingRequest::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletNamingRequest::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletNamingRequest.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletNamingRequest::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletNamingRequest.app_name)
}

// optional int64 app_id = 2;
inline bool ServletNamingRequest::_internal_has_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServletNamingRequest::has_app_id() const {
  return _internal_has_app_id();
}
inline void ServletNamingRequest::clear_app_id() {
  _impl_.app_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t ServletNamingRequest::_internal_app_id() const {
  return _impl_.app_id_;
}
inline int64_t ServletNamingRequest::app_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.app_id)
  return _internal_app_id();
}
inline void ServletNamingRequest::_internal_set_app_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_id_ = value;
}
inline void ServletNamingRequest::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.app_id)
}

// repeated string zones = 3;
inline int ServletNamingRequest::_internal_zones_size() const {
  return _impl_.zones_.size();
}
inline int ServletNamingRequest::zones_size() const {
  return _internal_zones_size();
}
inline void ServletNamingRequest::clear_zones() {
  _impl_.zones_.Clear();
}
inline std::string* ServletNamingRequest::add_zones() {
  std::string* _s = _internal_add_zones();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.ServletNamingRequest.zones)
  return _s;
}
inline const std::string& ServletNamingRequest::_internal_zones(int index) const {
  return _impl_.zones_.Get(index);
}
inline const std::string& ServletNamingRequest::zones(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.zones)
  return _internal_zones(index);
}
inline std::string* ServletNamingRequest::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingRequest.zones)
  return _impl_.zones_.Mutable(index);
}
inline void ServletNamingRequest::set_zones(int index, const std::string& value) {
  _impl_.zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::set_zones(int index, std::string&& value) {
  _impl_.zones_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::set_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::set_zones(int index, const char* value, size_t size) {
  _impl_.zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.ServletNamingRequest.zones)
}
inline std::string* ServletNamingRequest::_internal_add_zones() {
  return _impl_.zones_.Add();
}
inline void ServletNamingRequest::add_zones(const std::string& value) {
  _impl_.zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::add_zones(std::string&& value) {
  _impl_.zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::add_zones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.ServletNamingRequest.zones)
}
inline void ServletNamingRequest::add_zones(const char* value, size_t size) {
  _impl_.zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.ServletNamingRequest.zones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServletNamingRequest::zones() const {
  // @@protoc_insertion_point(field_list:sirius.proto.ServletNamingRequest.zones)
  return _impl_.zones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServletNamingRequest::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.ServletNamingRequest.zones)
  return &_impl_.zones_;
}

// optional int64 zone_id = 4;
inline bool ServletNamingRequest::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServletNamingRequest::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void ServletNamingRequest::clear_zone_id() {
  _impl_.zone_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t ServletNamingRequest::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int64_t ServletNamingRequest::zone_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.zone_id)
  return _internal_zone_id();
}
inline void ServletNamingRequest::_internal_set_zone_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zone_id_ = value;
}
inline void ServletNamingRequest::set_zone_id(int64_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.zone_id)
}

// repeated string env = 5;
inline int ServletNamingRequest::_internal_env_size() const {
  return _impl_.env_.size();
}
inline int ServletNamingRequest::env_size() const {
  return _internal_env_size();
}
inline void ServletNamingRequest::clear_env() {
  _impl_.env_.Clear();
}
inline std::string* ServletNamingRequest::add_env() {
  std::string* _s = _internal_add_env();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.ServletNamingRequest.env)
  return _s;
}
inline const std::string& ServletNamingRequest::_internal_env(int index) const {
  return _impl_.env_.Get(index);
}
inline const std::string& ServletNamingRequest::env(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.env)
  return _internal_env(index);
}
inline std::string* ServletNamingRequest::mutable_env(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingRequest.env)
  return _impl_.env_.Mutable(index);
}
inline void ServletNamingRequest::set_env(int index, const std::string& value) {
  _impl_.env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::set_env(int index, std::string&& value) {
  _impl_.env_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::set_env(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::set_env(int index, const char* value, size_t size) {
  _impl_.env_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.ServletNamingRequest.env)
}
inline std::string* ServletNamingRequest::_internal_add_env() {
  return _impl_.env_.Add();
}
inline void ServletNamingRequest::add_env(const std::string& value) {
  _impl_.env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::add_env(std::string&& value) {
  _impl_.env_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::add_env(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.ServletNamingRequest.env)
}
inline void ServletNamingRequest::add_env(const char* value, size_t size) {
  _impl_.env_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.ServletNamingRequest.env)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServletNamingRequest::env() const {
  // @@protoc_insertion_point(field_list:sirius.proto.ServletNamingRequest.env)
  return _impl_.env_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServletNamingRequest::mutable_env() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.ServletNamingRequest.env)
  return &_impl_.env_;
}

// repeated string color = 6;
inline int ServletNamingRequest::_internal_color_size() const {
  return _impl_.color_.size();
}
inline int ServletNamingRequest::color_size() const {
  return _internal_color_size();
}
inline void ServletNamingRequest::clear_color() {
  _impl_.color_.Clear();
}
inline std::string* ServletNamingRequest::add_color() {
  std::string* _s = _internal_add_color();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.ServletNamingRequest.color)
  return _s;
}
inline const std::string& ServletNamingRequest::_internal_color(int index) const {
  return _impl_.color_.Get(index);
}
inline const std::string& ServletNamingRequest::color(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingRequest.color)
  return _internal_color(index);
}
inline std::string* ServletNamingRequest::mutable_color(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingRequest.color)
  return _impl_.color_.Mutable(index);
}
inline void ServletNamingRequest::set_color(int index, const std::string& value) {
  _impl_.color_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::set_color(int index, std::string&& value) {
  _impl_.color_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::set_color(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.color_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::set_color(int index, const char* value, size_t size) {
  _impl_.color_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.ServletNamingRequest.color)
}
inline std::string* ServletNamingRequest::_internal_add_color() {
  return _impl_.color_.Add();
}
inline void ServletNamingRequest::add_color(const std::string& value) {
  _impl_.color_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::add_color(std::string&& value) {
  _impl_.color_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::add_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.color_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.ServletNamingRequest.color)
}
inline void ServletNamingRequest::add_color(const char* value, size_t size) {
  _impl_.color_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.ServletNamingRequest.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServletNamingRequest::color() const {
  // @@protoc_insertion_point(field_list:sirius.proto.ServletNamingRequest.color)
  return _impl_.color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServletNamingRequest::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.ServletNamingRequest.color)
  return &_impl_.color_;
}

// -------------------------------------------------------------------

// ServletNamingResponse

// required .sirius.proto.ErrCode errcode = 1;
inline bool ServletNamingResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServletNamingResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void ServletNamingResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sirius::proto::ErrCode ServletNamingResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode ServletNamingResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingResponse.errcode)
  return _internal_errcode();
}
inline void ServletNamingResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errcode_ = value;
}
inline void ServletNamingResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingResponse.errcode)
}

// optional string errmsg = 2;
inline bool ServletNamingResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServletNamingResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void ServletNamingResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServletNamingResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletNamingResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingResponse.errmsg)
}
inline std::string* ServletNamingResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingResponse.errmsg)
  return _s;
}
inline const std::string& ServletNamingResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ServletNamingResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletNamingResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletNamingResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletNamingResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletNamingResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletNamingResponse.errmsg)
}

// optional string leader = 3;
inline bool ServletNamingResponse::_internal_has_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServletNamingResponse::has_leader() const {
  return _internal_has_leader();
}
inline void ServletNamingResponse::clear_leader() {
  _impl_.leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServletNamingResponse::leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingResponse.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServletNamingResponse::set_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ServletNamingResponse.leader)
}
inline std::string* ServletNamingResponse::mutable_leader() {
  std::string* _s = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingResponse.leader)
  return _s;
}
inline const std::string& ServletNamingResponse::_internal_leader() const {
  return _impl_.leader_.Get();
}
inline void ServletNamingResponse::_internal_set_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.leader_.Set(value, GetArenaForAllocation());
}
inline std::string* ServletNamingResponse::_internal_mutable_leader() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.leader_.Mutable(GetArenaForAllocation());
}
inline std::string* ServletNamingResponse::release_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.ServletNamingResponse.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServletNamingResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leader_.SetAllocated(leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ServletNamingResponse.leader)
}

// repeated .sirius.proto.ServletInfo servlets = 4;
inline int ServletNamingResponse::_internal_servlets_size() const {
  return _impl_.servlets_.size();
}
inline int ServletNamingResponse::servlets_size() const {
  return _internal_servlets_size();
}
inline void ServletNamingResponse::clear_servlets() {
  _impl_.servlets_.Clear();
}
inline ::sirius::proto::ServletInfo* ServletNamingResponse::mutable_servlets(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.ServletNamingResponse.servlets)
  return _impl_.servlets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >*
ServletNamingResponse::mutable_servlets() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.ServletNamingResponse.servlets)
  return &_impl_.servlets_;
}
inline const ::sirius::proto::ServletInfo& ServletNamingResponse::_internal_servlets(int index) const {
  return _impl_.servlets_.Get(index);
}
inline const ::sirius::proto::ServletInfo& ServletNamingResponse::servlets(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.ServletNamingResponse.servlets)
  return _internal_servlets(index);
}
inline ::sirius::proto::ServletInfo* ServletNamingResponse::_internal_add_servlets() {
  return _impl_.servlets_.Add();
}
inline ::sirius::proto::ServletInfo* ServletNamingResponse::add_servlets() {
  ::sirius::proto::ServletInfo* _add = _internal_add_servlets();
  // @@protoc_insertion_point(field_add:sirius.proto.ServletNamingResponse.servlets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >&
ServletNamingResponse::servlets() const {
  // @@protoc_insertion_point(field_list:sirius.proto.ServletNamingResponse.servlets)
  return _impl_.servlets_;
}

// -------------------------------------------------------------------

// DiscoveryManagerRequest

// required .sirius.proto.OpType op_type = 1;
inline bool DiscoveryManagerRequest::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DiscoveryManagerRequest::has_op_type() const {
  return _internal_has_op_type();
}
inline void DiscoveryManagerRequest::clear_op_type() {
  _impl_.op_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::sirius::proto::OpType DiscoveryManagerRequest::_internal_op_type() const {
  return static_cast< ::sirius::proto::OpType >(_impl_.op_type_);
}
inline ::sirius::proto::OpType DiscoveryManagerRequest::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.op_type)
  return _internal_op_type();
}
inline void DiscoveryManagerRequest::_internal_set_op_type(::sirius::proto::OpType value) {
  assert(::sirius::proto::OpType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.op_type_ = value;
}
inline void DiscoveryManagerRequest::set_op_type(::sirius::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerRequest.op_type)
}

// optional .sirius.proto.AppInfo app_info = 2;
inline bool DiscoveryManagerRequest::_internal_has_app_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.app_info_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_app_info() const {
  return _internal_has_app_info();
}
inline void DiscoveryManagerRequest::clear_app_info() {
  if (_impl_.app_info_ != nullptr) _impl_.app_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sirius::proto::AppInfo& DiscoveryManagerRequest::_internal_app_info() const {
  const ::sirius::proto::AppInfo* p = _impl_.app_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::AppInfo&>(
      ::sirius::proto::_AppInfo_default_instance_);
}
inline const ::sirius::proto::AppInfo& DiscoveryManagerRequest::app_info() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.app_info)
  return _internal_app_info();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_app_info(
    ::sirius::proto::AppInfo* app_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.app_info_);
  }
  _impl_.app_info_ = app_info;
  if (app_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.app_info)
}
inline ::sirius::proto::AppInfo* DiscoveryManagerRequest::release_app_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sirius::proto::AppInfo* temp = _impl_.app_info_;
  _impl_.app_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::AppInfo* DiscoveryManagerRequest::unsafe_arena_release_app_info() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.app_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sirius::proto::AppInfo* temp = _impl_.app_info_;
  _impl_.app_info_ = nullptr;
  return temp;
}
inline ::sirius::proto::AppInfo* DiscoveryManagerRequest::_internal_mutable_app_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::AppInfo>(GetArenaForAllocation());
    _impl_.app_info_ = p;
  }
  return _impl_.app_info_;
}
inline ::sirius::proto::AppInfo* DiscoveryManagerRequest::mutable_app_info() {
  ::sirius::proto::AppInfo* _msg = _internal_mutable_app_info();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.app_info)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_app_info(::sirius::proto::AppInfo* app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.app_info_;
  }
  if (app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(app_info);
    if (message_arena != submessage_arena) {
      app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_info_ = app_info;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.app_info)
}

// optional .sirius.proto.UserPrivilege user_privilege = 3;
inline bool DiscoveryManagerRequest::_internal_has_user_privilege() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_privilege_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_user_privilege() const {
  return _internal_has_user_privilege();
}
inline const ::sirius::proto::UserPrivilege& DiscoveryManagerRequest::_internal_user_privilege() const {
  const ::sirius::proto::UserPrivilege* p = _impl_.user_privilege_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::UserPrivilege&>(
      ::sirius::proto::_UserPrivilege_default_instance_);
}
inline const ::sirius::proto::UserPrivilege& DiscoveryManagerRequest::user_privilege() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.user_privilege)
  return _internal_user_privilege();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_user_privilege(
    ::sirius::proto::UserPrivilege* user_privilege) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_privilege_);
  }
  _impl_.user_privilege_ = user_privilege;
  if (user_privilege) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.user_privilege)
}
inline ::sirius::proto::UserPrivilege* DiscoveryManagerRequest::release_user_privilege() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sirius::proto::UserPrivilege* temp = _impl_.user_privilege_;
  _impl_.user_privilege_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::UserPrivilege* DiscoveryManagerRequest::unsafe_arena_release_user_privilege() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.user_privilege)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sirius::proto::UserPrivilege* temp = _impl_.user_privilege_;
  _impl_.user_privilege_ = nullptr;
  return temp;
}
inline ::sirius::proto::UserPrivilege* DiscoveryManagerRequest::_internal_mutable_user_privilege() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_privilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::UserPrivilege>(GetArenaForAllocation());
    _impl_.user_privilege_ = p;
  }
  return _impl_.user_privilege_;
}
inline ::sirius::proto::UserPrivilege* DiscoveryManagerRequest::mutable_user_privilege() {
  ::sirius::proto::UserPrivilege* _msg = _internal_mutable_user_privilege();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.user_privilege)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_user_privilege(::sirius::proto::UserPrivilege* user_privilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_privilege_);
  }
  if (user_privilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_privilege));
    if (message_arena != submessage_arena) {
      user_privilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_privilege, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_privilege_ = user_privilege;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.user_privilege)
}

// optional .sirius.proto.AutoIncrementRequest auto_increment = 4;
inline bool DiscoveryManagerRequest::_internal_has_auto_increment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auto_increment_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_auto_increment() const {
  return _internal_has_auto_increment();
}
inline const ::sirius::proto::AutoIncrementRequest& DiscoveryManagerRequest::_internal_auto_increment() const {
  const ::sirius::proto::AutoIncrementRequest* p = _impl_.auto_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::AutoIncrementRequest&>(
      ::sirius::proto::_AutoIncrementRequest_default_instance_);
}
inline const ::sirius::proto::AutoIncrementRequest& DiscoveryManagerRequest::auto_increment() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.auto_increment)
  return _internal_auto_increment();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_auto_increment(
    ::sirius::proto::AutoIncrementRequest* auto_increment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_increment_);
  }
  _impl_.auto_increment_ = auto_increment;
  if (auto_increment) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.auto_increment)
}
inline ::sirius::proto::AutoIncrementRequest* DiscoveryManagerRequest::release_auto_increment() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::AutoIncrementRequest* temp = _impl_.auto_increment_;
  _impl_.auto_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::AutoIncrementRequest* DiscoveryManagerRequest::unsafe_arena_release_auto_increment() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.auto_increment)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::AutoIncrementRequest* temp = _impl_.auto_increment_;
  _impl_.auto_increment_ = nullptr;
  return temp;
}
inline ::sirius::proto::AutoIncrementRequest* DiscoveryManagerRequest::_internal_mutable_auto_increment() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.auto_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::AutoIncrementRequest>(GetArenaForAllocation());
    _impl_.auto_increment_ = p;
  }
  return _impl_.auto_increment_;
}
inline ::sirius::proto::AutoIncrementRequest* DiscoveryManagerRequest::mutable_auto_increment() {
  ::sirius::proto::AutoIncrementRequest* _msg = _internal_mutable_auto_increment();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.auto_increment)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_auto_increment(::sirius::proto::AutoIncrementRequest* auto_increment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_increment_);
  }
  if (auto_increment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_increment));
    if (message_arena != submessage_arena) {
      auto_increment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_increment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.auto_increment_ = auto_increment;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.auto_increment)
}

// repeated string resource_tags = 5;
inline int DiscoveryManagerRequest::_internal_resource_tags_size() const {
  return _impl_.resource_tags_.size();
}
inline int DiscoveryManagerRequest::resource_tags_size() const {
  return _internal_resource_tags_size();
}
inline void DiscoveryManagerRequest::clear_resource_tags() {
  _impl_.resource_tags_.Clear();
}
inline std::string* DiscoveryManagerRequest::add_resource_tags() {
  std::string* _s = _internal_add_resource_tags();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.DiscoveryManagerRequest.resource_tags)
  return _s;
}
inline const std::string& DiscoveryManagerRequest::_internal_resource_tags(int index) const {
  return _impl_.resource_tags_.Get(index);
}
inline const std::string& DiscoveryManagerRequest::resource_tags(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.resource_tags)
  return _internal_resource_tags(index);
}
inline std::string* DiscoveryManagerRequest::mutable_resource_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.resource_tags)
  return _impl_.resource_tags_.Mutable(index);
}
inline void DiscoveryManagerRequest::set_resource_tags(int index, const std::string& value) {
  _impl_.resource_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::set_resource_tags(int index, std::string&& value) {
  _impl_.resource_tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::set_resource_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::set_resource_tags(int index, const char* value, size_t size) {
  _impl_.resource_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline std::string* DiscoveryManagerRequest::_internal_add_resource_tags() {
  return _impl_.resource_tags_.Add();
}
inline void DiscoveryManagerRequest::add_resource_tags(const std::string& value) {
  _impl_.resource_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::add_resource_tags(std::string&& value) {
  _impl_.resource_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::add_resource_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.resource_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline void DiscoveryManagerRequest::add_resource_tags(const char* value, size_t size) {
  _impl_.resource_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.DiscoveryManagerRequest.resource_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DiscoveryManagerRequest::resource_tags() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryManagerRequest.resource_tags)
  return _impl_.resource_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DiscoveryManagerRequest::mutable_resource_tags() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryManagerRequest.resource_tags)
  return &_impl_.resource_tags_;
}

// optional .sirius.proto.ConfigInfo config_info = 6;
inline bool DiscoveryManagerRequest::_internal_has_config_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_info_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_config_info() const {
  return _internal_has_config_info();
}
inline const ::sirius::proto::ConfigInfo& DiscoveryManagerRequest::_internal_config_info() const {
  const ::sirius::proto::ConfigInfo* p = _impl_.config_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::ConfigInfo&>(
      ::sirius::proto::_ConfigInfo_default_instance_);
}
inline const ::sirius::proto::ConfigInfo& DiscoveryManagerRequest::config_info() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.config_info)
  return _internal_config_info();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_config_info(
    ::sirius::proto::ConfigInfo* config_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_info_);
  }
  _impl_.config_info_ = config_info;
  if (config_info) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.config_info)
}
inline ::sirius::proto::ConfigInfo* DiscoveryManagerRequest::release_config_info() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sirius::proto::ConfigInfo* temp = _impl_.config_info_;
  _impl_.config_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::ConfigInfo* DiscoveryManagerRequest::unsafe_arena_release_config_info() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.config_info)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::sirius::proto::ConfigInfo* temp = _impl_.config_info_;
  _impl_.config_info_ = nullptr;
  return temp;
}
inline ::sirius::proto::ConfigInfo* DiscoveryManagerRequest::_internal_mutable_config_info() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.config_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::ConfigInfo>(GetArenaForAllocation());
    _impl_.config_info_ = p;
  }
  return _impl_.config_info_;
}
inline ::sirius::proto::ConfigInfo* DiscoveryManagerRequest::mutable_config_info() {
  ::sirius::proto::ConfigInfo* _msg = _internal_mutable_config_info();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.config_info)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_config_info(::sirius::proto::ConfigInfo* config_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_info_);
  }
  if (config_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_info));
    if (message_arena != submessage_arena) {
      config_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.config_info_ = config_info;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.config_info)
}

// optional .sirius.proto.ZoneInfo zone_info = 7;
inline bool DiscoveryManagerRequest::_internal_has_zone_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zone_info_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_zone_info() const {
  return _internal_has_zone_info();
}
inline void DiscoveryManagerRequest::clear_zone_info() {
  if (_impl_.zone_info_ != nullptr) _impl_.zone_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::sirius::proto::ZoneInfo& DiscoveryManagerRequest::_internal_zone_info() const {
  const ::sirius::proto::ZoneInfo* p = _impl_.zone_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::ZoneInfo&>(
      ::sirius::proto::_ZoneInfo_default_instance_);
}
inline const ::sirius::proto::ZoneInfo& DiscoveryManagerRequest::zone_info() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.zone_info)
  return _internal_zone_info();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_zone_info(
    ::sirius::proto::ZoneInfo* zone_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zone_info_);
  }
  _impl_.zone_info_ = zone_info;
  if (zone_info) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.zone_info)
}
inline ::sirius::proto::ZoneInfo* DiscoveryManagerRequest::release_zone_info() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sirius::proto::ZoneInfo* temp = _impl_.zone_info_;
  _impl_.zone_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::ZoneInfo* DiscoveryManagerRequest::unsafe_arena_release_zone_info() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.zone_info)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::sirius::proto::ZoneInfo* temp = _impl_.zone_info_;
  _impl_.zone_info_ = nullptr;
  return temp;
}
inline ::sirius::proto::ZoneInfo* DiscoveryManagerRequest::_internal_mutable_zone_info() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.zone_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::ZoneInfo>(GetArenaForAllocation());
    _impl_.zone_info_ = p;
  }
  return _impl_.zone_info_;
}
inline ::sirius::proto::ZoneInfo* DiscoveryManagerRequest::mutable_zone_info() {
  ::sirius::proto::ZoneInfo* _msg = _internal_mutable_zone_info();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.zone_info)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_zone_info(::sirius::proto::ZoneInfo* zone_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zone_info_;
  }
  if (zone_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zone_info);
    if (message_arena != submessage_arena) {
      zone_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.zone_info)
}

// optional .sirius.proto.ServletInfo servlet_info = 8;
inline bool DiscoveryManagerRequest::_internal_has_servlet_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.servlet_info_ != nullptr);
  return value;
}
inline bool DiscoveryManagerRequest::has_servlet_info() const {
  return _internal_has_servlet_info();
}
inline void DiscoveryManagerRequest::clear_servlet_info() {
  if (_impl_.servlet_info_ != nullptr) _impl_.servlet_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::sirius::proto::ServletInfo& DiscoveryManagerRequest::_internal_servlet_info() const {
  const ::sirius::proto::ServletInfo* p = _impl_.servlet_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::ServletInfo&>(
      ::sirius::proto::_ServletInfo_default_instance_);
}
inline const ::sirius::proto::ServletInfo& DiscoveryManagerRequest::servlet_info() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerRequest.servlet_info)
  return _internal_servlet_info();
}
inline void DiscoveryManagerRequest::unsafe_arena_set_allocated_servlet_info(
    ::sirius::proto::ServletInfo* servlet_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.servlet_info_);
  }
  _impl_.servlet_info_ = servlet_info;
  if (servlet_info) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryManagerRequest.servlet_info)
}
inline ::sirius::proto::ServletInfo* DiscoveryManagerRequest::release_servlet_info() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sirius::proto::ServletInfo* temp = _impl_.servlet_info_;
  _impl_.servlet_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::ServletInfo* DiscoveryManagerRequest::unsafe_arena_release_servlet_info() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerRequest.servlet_info)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::sirius::proto::ServletInfo* temp = _impl_.servlet_info_;
  _impl_.servlet_info_ = nullptr;
  return temp;
}
inline ::sirius::proto::ServletInfo* DiscoveryManagerRequest::_internal_mutable_servlet_info() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.servlet_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::ServletInfo>(GetArenaForAllocation());
    _impl_.servlet_info_ = p;
  }
  return _impl_.servlet_info_;
}
inline ::sirius::proto::ServletInfo* DiscoveryManagerRequest::mutable_servlet_info() {
  ::sirius::proto::ServletInfo* _msg = _internal_mutable_servlet_info();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerRequest.servlet_info)
  return _msg;
}
inline void DiscoveryManagerRequest::set_allocated_servlet_info(::sirius::proto::ServletInfo* servlet_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.servlet_info_;
  }
  if (servlet_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(servlet_info);
    if (message_arena != submessage_arena) {
      servlet_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servlet_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.servlet_info_ = servlet_info;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerRequest.servlet_info)
}

// -------------------------------------------------------------------

// DiscoveryRegisterResponse

// required .sirius.proto.ErrCode errcode = 1;
inline bool DiscoveryRegisterResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryRegisterResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void DiscoveryRegisterResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::sirius::proto::ErrCode DiscoveryRegisterResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode DiscoveryRegisterResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryRegisterResponse.errcode)
  return _internal_errcode();
}
inline void DiscoveryRegisterResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errcode_ = value;
}
inline void DiscoveryRegisterResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryRegisterResponse.errcode)
}

// optional string errmsg = 2;
inline bool DiscoveryRegisterResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryRegisterResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void DiscoveryRegisterResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryRegisterResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryRegisterResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryRegisterResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryRegisterResponse.errmsg)
}
inline std::string* DiscoveryRegisterResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryRegisterResponse.errmsg)
  return _s;
}
inline const std::string& DiscoveryRegisterResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void DiscoveryRegisterResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryRegisterResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryRegisterResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryRegisterResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryRegisterResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryRegisterResponse.errmsg)
}

// -------------------------------------------------------------------

// DiscoveryManagerResponse

// required .sirius.proto.ErrCode errcode = 1;
inline bool DiscoveryManagerResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void DiscoveryManagerResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sirius::proto::ErrCode DiscoveryManagerResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode DiscoveryManagerResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.errcode)
  return _internal_errcode();
}
inline void DiscoveryManagerResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errcode_ = value;
}
inline void DiscoveryManagerResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.errcode)
}

// optional string errmsg = 2;
inline bool DiscoveryManagerResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void DiscoveryManagerResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryManagerResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryManagerResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.errmsg)
}
inline std::string* DiscoveryManagerResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerResponse.errmsg)
  return _s;
}
inline const std::string& DiscoveryManagerResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void DiscoveryManagerResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryManagerResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryManagerResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryManagerResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerResponse.errmsg)
}

// optional string leader = 3;
inline bool DiscoveryManagerResponse::_internal_has_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_leader() const {
  return _internal_has_leader();
}
inline void DiscoveryManagerResponse::clear_leader() {
  _impl_.leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiscoveryManagerResponse::leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryManagerResponse::set_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.leader)
}
inline std::string* DiscoveryManagerResponse::mutable_leader() {
  std::string* _s = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryManagerResponse.leader)
  return _s;
}
inline const std::string& DiscoveryManagerResponse::_internal_leader() const {
  return _impl_.leader_.Get();
}
inline void DiscoveryManagerResponse::_internal_set_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.leader_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryManagerResponse::_internal_mutable_leader() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.leader_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryManagerResponse::release_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryManagerResponse.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryManagerResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leader_.SetAllocated(leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryManagerResponse.leader)
}

// optional .sirius.proto.OpType op_type = 5;
inline bool DiscoveryManagerResponse::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_op_type() const {
  return _internal_has_op_type();
}
inline void DiscoveryManagerResponse::clear_op_type() {
  _impl_.op_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sirius::proto::OpType DiscoveryManagerResponse::_internal_op_type() const {
  return static_cast< ::sirius::proto::OpType >(_impl_.op_type_);
}
inline ::sirius::proto::OpType DiscoveryManagerResponse::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.op_type)
  return _internal_op_type();
}
inline void DiscoveryManagerResponse::_internal_set_op_type(::sirius::proto::OpType value) {
  assert(::sirius::proto::OpType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.op_type_ = value;
}
inline void DiscoveryManagerResponse::set_op_type(::sirius::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.op_type)
}

// optional uint64 start_id = 6;
inline bool DiscoveryManagerResponse::_internal_has_start_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_start_id() const {
  return _internal_has_start_id();
}
inline void DiscoveryManagerResponse::clear_start_id() {
  _impl_.start_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t DiscoveryManagerResponse::_internal_start_id() const {
  return _impl_.start_id_;
}
inline uint64_t DiscoveryManagerResponse::start_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.start_id)
  return _internal_start_id();
}
inline void DiscoveryManagerResponse::_internal_set_start_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_id_ = value;
}
inline void DiscoveryManagerResponse::set_start_id(uint64_t value) {
  _internal_set_start_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.start_id)
}

// optional uint64 end_id = 7;
inline bool DiscoveryManagerResponse::_internal_has_end_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DiscoveryManagerResponse::has_end_id() const {
  return _internal_has_end_id();
}
inline void DiscoveryManagerResponse::clear_end_id() {
  _impl_.end_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t DiscoveryManagerResponse::_internal_end_id() const {
  return _impl_.end_id_;
}
inline uint64_t DiscoveryManagerResponse::end_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryManagerResponse.end_id)
  return _internal_end_id();
}
inline void DiscoveryManagerResponse::_internal_set_end_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.end_id_ = value;
}
inline void DiscoveryManagerResponse::set_end_id(uint64_t value) {
  _internal_set_end_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryManagerResponse.end_id)
}

// -------------------------------------------------------------------

// DiscoveryQueryRequest

// required .sirius.proto.QueryOpType op_type = 1;
inline bool DiscoveryQueryRequest::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_op_type() const {
  return _internal_has_op_type();
}
inline void DiscoveryQueryRequest::clear_op_type() {
  _impl_.op_type_ = 3;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::sirius::proto::QueryOpType DiscoveryQueryRequest::_internal_op_type() const {
  return static_cast< ::sirius::proto::QueryOpType >(_impl_.op_type_);
}
inline ::sirius::proto::QueryOpType DiscoveryQueryRequest::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.op_type)
  return _internal_op_type();
}
inline void DiscoveryQueryRequest::_internal_set_op_type(::sirius::proto::QueryOpType value) {
  assert(::sirius::proto::QueryOpType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.op_type_ = value;
}
inline void DiscoveryQueryRequest::set_op_type(::sirius::proto::QueryOpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.op_type)
}

// optional string instance_address = 2;
inline bool DiscoveryQueryRequest::_internal_has_instance_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_instance_address() const {
  return _internal_has_instance_address();
}
inline void DiscoveryQueryRequest::clear_instance_address() {
  _impl_.instance_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryQueryRequest::instance_address() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.instance_address)
  return _internal_instance_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_instance_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instance_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.instance_address)
}
inline std::string* DiscoveryQueryRequest::mutable_instance_address() {
  std::string* _s = _internal_mutable_instance_address();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.instance_address)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_instance_address() const {
  return _impl_.instance_address_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_instance_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_instance_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_address_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_instance_address() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.instance_address)
  if (!_internal_has_instance_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instance_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_address_.IsDefault()) {
    _impl_.instance_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_instance_address(std::string* instance_address) {
  if (instance_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_address_.SetAllocated(instance_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_address_.IsDefault()) {
    _impl_.instance_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.instance_address)
}

// optional string user_name = 3;
inline bool DiscoveryQueryRequest::_internal_has_user_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_user_name() const {
  return _internal_has_user_name();
}
inline void DiscoveryQueryRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiscoveryQueryRequest::user_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.user_name)
}
inline std::string* DiscoveryQueryRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.user_name)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_user_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_user_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.user_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.user_name)
}

// optional string app_name = 4;
inline bool DiscoveryQueryRequest::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_app_name() const {
  return _internal_has_app_name();
}
inline void DiscoveryQueryRequest::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DiscoveryQueryRequest::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.app_name)
}
inline std::string* DiscoveryQueryRequest::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.app_name)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.app_name)
}

// optional string config_name = 5;
inline bool DiscoveryQueryRequest::_internal_has_config_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_config_name() const {
  return _internal_has_config_name();
}
inline void DiscoveryQueryRequest::clear_config_name() {
  _impl_.config_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DiscoveryQueryRequest::config_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.config_name)
  return _internal_config_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_config_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.config_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.config_name)
}
inline std::string* DiscoveryQueryRequest::mutable_config_name() {
  std::string* _s = _internal_mutable_config_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.config_name)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_config_name() const {
  return _impl_.config_name_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_config_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.config_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_config_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.config_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_config_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.config_name)
  if (!_internal_has_config_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.config_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_name_.IsDefault()) {
    _impl_.config_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_config_name(std::string* config_name) {
  if (config_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.config_name_.SetAllocated(config_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.config_name_.IsDefault()) {
    _impl_.config_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.config_name)
}

// optional .sirius.proto.Version config_version = 6;
inline bool DiscoveryQueryRequest::_internal_has_config_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_version_ != nullptr);
  return value;
}
inline bool DiscoveryQueryRequest::has_config_version() const {
  return _internal_has_config_version();
}
inline const ::sirius::proto::Version& DiscoveryQueryRequest::_internal_config_version() const {
  const ::sirius::proto::Version* p = _impl_.config_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::Version&>(
      ::sirius::proto::_Version_default_instance_);
}
inline const ::sirius::proto::Version& DiscoveryQueryRequest::config_version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.config_version)
  return _internal_config_version();
}
inline void DiscoveryQueryRequest::unsafe_arena_set_allocated_config_version(
    ::sirius::proto::Version* config_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_version_);
  }
  _impl_.config_version_ = config_version;
  if (config_version) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.DiscoveryQueryRequest.config_version)
}
inline ::sirius::proto::Version* DiscoveryQueryRequest::release_config_version() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::sirius::proto::Version* temp = _impl_.config_version_;
  _impl_.config_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::Version* DiscoveryQueryRequest::unsafe_arena_release_config_version() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.config_version)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::sirius::proto::Version* temp = _impl_.config_version_;
  _impl_.config_version_ = nullptr;
  return temp;
}
inline ::sirius::proto::Version* DiscoveryQueryRequest::_internal_mutable_config_version() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.config_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::Version>(GetArenaForAllocation());
    _impl_.config_version_ = p;
  }
  return _impl_.config_version_;
}
inline ::sirius::proto::Version* DiscoveryQueryRequest::mutable_config_version() {
  ::sirius::proto::Version* _msg = _internal_mutable_config_version();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.config_version)
  return _msg;
}
inline void DiscoveryQueryRequest::set_allocated_config_version(::sirius::proto::Version* config_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_version_);
  }
  if (config_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_version));
    if (message_arena != submessage_arena) {
      config_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.config_version_ = config_version;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.config_version)
}

// optional string zone = 7;
inline bool DiscoveryQueryRequest::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_zone() const {
  return _internal_has_zone();
}
inline void DiscoveryQueryRequest::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DiscoveryQueryRequest::zone() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.zone)
}
inline std::string* DiscoveryQueryRequest::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.zone)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_zone() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.zone)
}

// optional string servlet = 8;
inline bool DiscoveryQueryRequest::_internal_has_servlet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_servlet() const {
  return _internal_has_servlet();
}
inline void DiscoveryQueryRequest::clear_servlet() {
  _impl_.servlet_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DiscoveryQueryRequest::servlet() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.servlet)
  return _internal_servlet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_servlet(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.servlet_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.servlet)
}
inline std::string* DiscoveryQueryRequest::mutable_servlet() {
  std::string* _s = _internal_mutable_servlet();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.servlet)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_servlet() const {
  return _impl_.servlet_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_servlet(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.servlet_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_servlet() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.servlet_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_servlet() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.servlet)
  if (!_internal_has_servlet()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.servlet_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_.IsDefault()) {
    _impl_.servlet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_servlet(std::string* servlet) {
  if (servlet != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.servlet_.SetAllocated(servlet, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_.IsDefault()) {
    _impl_.servlet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.servlet)
}

// optional string color = 9;
inline bool DiscoveryQueryRequest::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_color() const {
  return _internal_has_color();
}
inline void DiscoveryQueryRequest::clear_color() {
  _impl_.color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DiscoveryQueryRequest::color() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_color(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.color)
}
inline std::string* DiscoveryQueryRequest::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.color)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_color() const {
  return _impl_.color_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_color(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_color() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.color)
}

// optional .sirius.proto.Status status = 10;
inline bool DiscoveryQueryRequest::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_status() const {
  return _internal_has_status();
}
inline void DiscoveryQueryRequest::clear_status() {
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::sirius::proto::Status DiscoveryQueryRequest::_internal_status() const {
  return static_cast< ::sirius::proto::Status >(_impl_.status_);
}
inline ::sirius::proto::Status DiscoveryQueryRequest::status() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.status)
  return _internal_status();
}
inline void DiscoveryQueryRequest::_internal_set_status(::sirius::proto::Status value) {
  assert(::sirius::proto::Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.status_ = value;
}
inline void DiscoveryQueryRequest::set_status(::sirius::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.status)
}

// optional string env = 11;
inline bool DiscoveryQueryRequest::_internal_has_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DiscoveryQueryRequest::has_env() const {
  return _internal_has_env();
}
inline void DiscoveryQueryRequest::clear_env() {
  _impl_.env_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& DiscoveryQueryRequest::env() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryRequest.env)
  return _internal_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryRequest::set_env(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.env_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryRequest.env)
}
inline std::string* DiscoveryQueryRequest::mutable_env() {
  std::string* _s = _internal_mutable_env();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryRequest.env)
  return _s;
}
inline const std::string& DiscoveryQueryRequest::_internal_env() const {
  return _impl_.env_.Get();
}
inline void DiscoveryQueryRequest::_internal_set_env(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.env_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::_internal_mutable_env() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.env_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryRequest::release_env() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryRequest.env)
  if (!_internal_has_env()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.env_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryRequest::set_allocated_env(std::string* env) {
  if (env != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.env_.SetAllocated(env, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryRequest.env)
}

// -------------------------------------------------------------------

// DiscoveryQueryResponse

// required .sirius.proto.ErrCode errcode = 1;
inline bool DiscoveryQueryResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DiscoveryQueryResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void DiscoveryQueryResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sirius::proto::ErrCode DiscoveryQueryResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode DiscoveryQueryResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.errcode)
  return _internal_errcode();
}
inline void DiscoveryQueryResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errcode_ = value;
}
inline void DiscoveryQueryResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryResponse.errcode)
}

// optional string errmsg = 2;
inline bool DiscoveryQueryResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscoveryQueryResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void DiscoveryQueryResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DiscoveryQueryResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryResponse.errmsg)
}
inline std::string* DiscoveryQueryResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.errmsg)
  return _s;
}
inline const std::string& DiscoveryQueryResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void DiscoveryQueryResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryResponse.errmsg)
}

// optional string leader = 3;
inline bool DiscoveryQueryResponse::_internal_has_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DiscoveryQueryResponse::has_leader() const {
  return _internal_has_leader();
}
inline void DiscoveryQueryResponse::clear_leader() {
  _impl_.leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DiscoveryQueryResponse::leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQueryResponse::set_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryResponse.leader)
}
inline std::string* DiscoveryQueryResponse::mutable_leader() {
  std::string* _s = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.leader)
  return _s;
}
inline const std::string& DiscoveryQueryResponse::_internal_leader() const {
  return _impl_.leader_.Get();
}
inline void DiscoveryQueryResponse::_internal_set_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.leader_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQueryResponse::_internal_mutable_leader() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.leader_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQueryResponse::release_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.DiscoveryQueryResponse.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DiscoveryQueryResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leader_.SetAllocated(leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.DiscoveryQueryResponse.leader)
}

// repeated .sirius.proto.UserPrivilege user_privilege = 4;
inline int DiscoveryQueryResponse::_internal_user_privilege_size() const {
  return _impl_.user_privilege_.size();
}
inline int DiscoveryQueryResponse::user_privilege_size() const {
  return _internal_user_privilege_size();
}
inline ::sirius::proto::UserPrivilege* DiscoveryQueryResponse::mutable_user_privilege(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.user_privilege)
  return _impl_.user_privilege_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::UserPrivilege >*
DiscoveryQueryResponse::mutable_user_privilege() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.user_privilege)
  return &_impl_.user_privilege_;
}
inline const ::sirius::proto::UserPrivilege& DiscoveryQueryResponse::_internal_user_privilege(int index) const {
  return _impl_.user_privilege_.Get(index);
}
inline const ::sirius::proto::UserPrivilege& DiscoveryQueryResponse::user_privilege(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.user_privilege)
  return _internal_user_privilege(index);
}
inline ::sirius::proto::UserPrivilege* DiscoveryQueryResponse::_internal_add_user_privilege() {
  return _impl_.user_privilege_.Add();
}
inline ::sirius::proto::UserPrivilege* DiscoveryQueryResponse::add_user_privilege() {
  ::sirius::proto::UserPrivilege* _add = _internal_add_user_privilege();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.user_privilege)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::UserPrivilege >&
DiscoveryQueryResponse::user_privilege() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.user_privilege)
  return _impl_.user_privilege_;
}

// repeated .sirius.proto.AppInfo app_infos = 5;
inline int DiscoveryQueryResponse::_internal_app_infos_size() const {
  return _impl_.app_infos_.size();
}
inline int DiscoveryQueryResponse::app_infos_size() const {
  return _internal_app_infos_size();
}
inline void DiscoveryQueryResponse::clear_app_infos() {
  _impl_.app_infos_.Clear();
}
inline ::sirius::proto::AppInfo* DiscoveryQueryResponse::mutable_app_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.app_infos)
  return _impl_.app_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::AppInfo >*
DiscoveryQueryResponse::mutable_app_infos() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.app_infos)
  return &_impl_.app_infos_;
}
inline const ::sirius::proto::AppInfo& DiscoveryQueryResponse::_internal_app_infos(int index) const {
  return _impl_.app_infos_.Get(index);
}
inline const ::sirius::proto::AppInfo& DiscoveryQueryResponse::app_infos(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.app_infos)
  return _internal_app_infos(index);
}
inline ::sirius::proto::AppInfo* DiscoveryQueryResponse::_internal_add_app_infos() {
  return _impl_.app_infos_.Add();
}
inline ::sirius::proto::AppInfo* DiscoveryQueryResponse::add_app_infos() {
  ::sirius::proto::AppInfo* _add = _internal_add_app_infos();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.app_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::AppInfo >&
DiscoveryQueryResponse::app_infos() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.app_infos)
  return _impl_.app_infos_;
}

// repeated .sirius.proto.QueryInstance flatten_instances = 6;
inline int DiscoveryQueryResponse::_internal_flatten_instances_size() const {
  return _impl_.flatten_instances_.size();
}
inline int DiscoveryQueryResponse::flatten_instances_size() const {
  return _internal_flatten_instances_size();
}
inline void DiscoveryQueryResponse::clear_flatten_instances() {
  _impl_.flatten_instances_.Clear();
}
inline ::sirius::proto::QueryInstance* DiscoveryQueryResponse::mutable_flatten_instances(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.flatten_instances)
  return _impl_.flatten_instances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryInstance >*
DiscoveryQueryResponse::mutable_flatten_instances() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.flatten_instances)
  return &_impl_.flatten_instances_;
}
inline const ::sirius::proto::QueryInstance& DiscoveryQueryResponse::_internal_flatten_instances(int index) const {
  return _impl_.flatten_instances_.Get(index);
}
inline const ::sirius::proto::QueryInstance& DiscoveryQueryResponse::flatten_instances(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.flatten_instances)
  return _internal_flatten_instances(index);
}
inline ::sirius::proto::QueryInstance* DiscoveryQueryResponse::_internal_add_flatten_instances() {
  return _impl_.flatten_instances_.Add();
}
inline ::sirius::proto::QueryInstance* DiscoveryQueryResponse::add_flatten_instances() {
  ::sirius::proto::QueryInstance* _add = _internal_add_flatten_instances();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.flatten_instances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryInstance >&
DiscoveryQueryResponse::flatten_instances() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.flatten_instances)
  return _impl_.flatten_instances_;
}

// repeated .sirius.proto.QueryUserPrivilege flatten_privileges = 7;
inline int DiscoveryQueryResponse::_internal_flatten_privileges_size() const {
  return _impl_.flatten_privileges_.size();
}
inline int DiscoveryQueryResponse::flatten_privileges_size() const {
  return _internal_flatten_privileges_size();
}
inline void DiscoveryQueryResponse::clear_flatten_privileges() {
  _impl_.flatten_privileges_.Clear();
}
inline ::sirius::proto::QueryUserPrivilege* DiscoveryQueryResponse::mutable_flatten_privileges(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.flatten_privileges)
  return _impl_.flatten_privileges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryUserPrivilege >*
DiscoveryQueryResponse::mutable_flatten_privileges() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.flatten_privileges)
  return &_impl_.flatten_privileges_;
}
inline const ::sirius::proto::QueryUserPrivilege& DiscoveryQueryResponse::_internal_flatten_privileges(int index) const {
  return _impl_.flatten_privileges_.Get(index);
}
inline const ::sirius::proto::QueryUserPrivilege& DiscoveryQueryResponse::flatten_privileges(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.flatten_privileges)
  return _internal_flatten_privileges(index);
}
inline ::sirius::proto::QueryUserPrivilege* DiscoveryQueryResponse::_internal_add_flatten_privileges() {
  return _impl_.flatten_privileges_.Add();
}
inline ::sirius::proto::QueryUserPrivilege* DiscoveryQueryResponse::add_flatten_privileges() {
  ::sirius::proto::QueryUserPrivilege* _add = _internal_add_flatten_privileges();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.flatten_privileges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::QueryUserPrivilege >&
DiscoveryQueryResponse::flatten_privileges() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.flatten_privileges)
  return _impl_.flatten_privileges_;
}

// repeated int64 peer_ids = 8;
inline int DiscoveryQueryResponse::_internal_peer_ids_size() const {
  return _impl_.peer_ids_.size();
}
inline int DiscoveryQueryResponse::peer_ids_size() const {
  return _internal_peer_ids_size();
}
inline void DiscoveryQueryResponse::clear_peer_ids() {
  _impl_.peer_ids_.Clear();
}
inline int64_t DiscoveryQueryResponse::_internal_peer_ids(int index) const {
  return _impl_.peer_ids_.Get(index);
}
inline int64_t DiscoveryQueryResponse::peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.peer_ids)
  return _internal_peer_ids(index);
}
inline void DiscoveryQueryResponse::set_peer_ids(int index, int64_t value) {
  _impl_.peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:sirius.proto.DiscoveryQueryResponse.peer_ids)
}
inline void DiscoveryQueryResponse::_internal_add_peer_ids(int64_t value) {
  _impl_.peer_ids_.Add(value);
}
inline void DiscoveryQueryResponse::add_peer_ids(int64_t value) {
  _internal_add_peer_ids(value);
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.peer_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DiscoveryQueryResponse::_internal_peer_ids() const {
  return _impl_.peer_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DiscoveryQueryResponse::peer_ids() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.peer_ids)
  return _internal_peer_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DiscoveryQueryResponse::_internal_mutable_peer_ids() {
  return &_impl_.peer_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DiscoveryQueryResponse::mutable_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.peer_ids)
  return _internal_mutable_peer_ids();
}

// repeated .sirius.proto.ZoneInfo zone_infos = 9;
inline int DiscoveryQueryResponse::_internal_zone_infos_size() const {
  return _impl_.zone_infos_.size();
}
inline int DiscoveryQueryResponse::zone_infos_size() const {
  return _internal_zone_infos_size();
}
inline void DiscoveryQueryResponse::clear_zone_infos() {
  _impl_.zone_infos_.Clear();
}
inline ::sirius::proto::ZoneInfo* DiscoveryQueryResponse::mutable_zone_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.zone_infos)
  return _impl_.zone_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ZoneInfo >*
DiscoveryQueryResponse::mutable_zone_infos() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.zone_infos)
  return &_impl_.zone_infos_;
}
inline const ::sirius::proto::ZoneInfo& DiscoveryQueryResponse::_internal_zone_infos(int index) const {
  return _impl_.zone_infos_.Get(index);
}
inline const ::sirius::proto::ZoneInfo& DiscoveryQueryResponse::zone_infos(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.zone_infos)
  return _internal_zone_infos(index);
}
inline ::sirius::proto::ZoneInfo* DiscoveryQueryResponse::_internal_add_zone_infos() {
  return _impl_.zone_infos_.Add();
}
inline ::sirius::proto::ZoneInfo* DiscoveryQueryResponse::add_zone_infos() {
  ::sirius::proto::ZoneInfo* _add = _internal_add_zone_infos();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.zone_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ZoneInfo >&
DiscoveryQueryResponse::zone_infos() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.zone_infos)
  return _impl_.zone_infos_;
}

// repeated .sirius.proto.ServletInfo servlet_infos = 10;
inline int DiscoveryQueryResponse::_internal_servlet_infos_size() const {
  return _impl_.servlet_infos_.size();
}
inline int DiscoveryQueryResponse::servlet_infos_size() const {
  return _internal_servlet_infos_size();
}
inline void DiscoveryQueryResponse::clear_servlet_infos() {
  _impl_.servlet_infos_.Clear();
}
inline ::sirius::proto::ServletInfo* DiscoveryQueryResponse::mutable_servlet_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.servlet_infos)
  return _impl_.servlet_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >*
DiscoveryQueryResponse::mutable_servlet_infos() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.servlet_infos)
  return &_impl_.servlet_infos_;
}
inline const ::sirius::proto::ServletInfo& DiscoveryQueryResponse::_internal_servlet_infos(int index) const {
  return _impl_.servlet_infos_.Get(index);
}
inline const ::sirius::proto::ServletInfo& DiscoveryQueryResponse::servlet_infos(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.servlet_infos)
  return _internal_servlet_infos(index);
}
inline ::sirius::proto::ServletInfo* DiscoveryQueryResponse::_internal_add_servlet_infos() {
  return _impl_.servlet_infos_.Add();
}
inline ::sirius::proto::ServletInfo* DiscoveryQueryResponse::add_servlet_infos() {
  ::sirius::proto::ServletInfo* _add = _internal_add_servlet_infos();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.servlet_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ServletInfo >&
DiscoveryQueryResponse::servlet_infos() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.servlet_infos)
  return _impl_.servlet_infos_;
}

// repeated .sirius.proto.ConfigInfo config_infos = 11;
inline int DiscoveryQueryResponse::_internal_config_infos_size() const {
  return _impl_.config_infos_.size();
}
inline int DiscoveryQueryResponse::config_infos_size() const {
  return _internal_config_infos_size();
}
inline ::sirius::proto::ConfigInfo* DiscoveryQueryResponse::mutable_config_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.DiscoveryQueryResponse.config_infos)
  return _impl_.config_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ConfigInfo >*
DiscoveryQueryResponse::mutable_config_infos() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.DiscoveryQueryResponse.config_infos)
  return &_impl_.config_infos_;
}
inline const ::sirius::proto::ConfigInfo& DiscoveryQueryResponse::_internal_config_infos(int index) const {
  return _impl_.config_infos_.Get(index);
}
inline const ::sirius::proto::ConfigInfo& DiscoveryQueryResponse::config_infos(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.DiscoveryQueryResponse.config_infos)
  return _internal_config_infos(index);
}
inline ::sirius::proto::ConfigInfo* DiscoveryQueryResponse::_internal_add_config_infos() {
  return _impl_.config_infos_.Add();
}
inline ::sirius::proto::ConfigInfo* DiscoveryQueryResponse::add_config_infos() {
  ::sirius::proto::ConfigInfo* _add = _internal_add_config_infos();
  // @@protoc_insertion_point(field_add:sirius.proto.DiscoveryQueryResponse.config_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::ConfigInfo >&
DiscoveryQueryResponse::config_infos() const {
  // @@protoc_insertion_point(field_list:sirius.proto.DiscoveryQueryResponse.config_infos)
  return _impl_.config_infos_;
}

// -------------------------------------------------------------------

// QueryUserPrivilege

// required string username = 1;
inline bool QueryUserPrivilege::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryUserPrivilege::has_username() const {
  return _internal_has_username();
}
inline void QueryUserPrivilege::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryUserPrivilege::username() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryUserPrivilege.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryUserPrivilege::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryUserPrivilege.username)
}
inline std::string* QueryUserPrivilege::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryUserPrivilege.username)
  return _s;
}
inline const std::string& QueryUserPrivilege::_internal_username() const {
  return _impl_.username_.Get();
}
inline void QueryUserPrivilege::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::release_username() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryUserPrivilege.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryUserPrivilege::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryUserPrivilege.username)
}

// required string app_name = 2;
inline bool QueryUserPrivilege::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryUserPrivilege::has_app_name() const {
  return _internal_has_app_name();
}
inline void QueryUserPrivilege::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QueryUserPrivilege::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryUserPrivilege.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryUserPrivilege::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryUserPrivilege.app_name)
}
inline std::string* QueryUserPrivilege::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryUserPrivilege.app_name)
  return _s;
}
inline const std::string& QueryUserPrivilege::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void QueryUserPrivilege::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryUserPrivilege.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryUserPrivilege::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryUserPrivilege.app_name)
}

// required string privilege = 3;
inline bool QueryUserPrivilege::_internal_has_privilege() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryUserPrivilege::has_privilege() const {
  return _internal_has_privilege();
}
inline void QueryUserPrivilege::clear_privilege() {
  _impl_.privilege_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& QueryUserPrivilege::privilege() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryUserPrivilege.privilege)
  return _internal_privilege();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryUserPrivilege::set_privilege(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.privilege_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryUserPrivilege.privilege)
}
inline std::string* QueryUserPrivilege::mutable_privilege() {
  std::string* _s = _internal_mutable_privilege();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryUserPrivilege.privilege)
  return _s;
}
inline const std::string& QueryUserPrivilege::_internal_privilege() const {
  return _impl_.privilege_.Get();
}
inline void QueryUserPrivilege::_internal_set_privilege(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.privilege_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::_internal_mutable_privilege() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.privilege_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::release_privilege() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryUserPrivilege.privilege)
  if (!_internal_has_privilege()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.privilege_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.privilege_.IsDefault()) {
    _impl_.privilege_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryUserPrivilege::set_allocated_privilege(std::string* privilege) {
  if (privilege != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.privilege_.SetAllocated(privilege, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.privilege_.IsDefault()) {
    _impl_.privilege_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryUserPrivilege.privilege)
}

// required .sirius.proto.RW servlet_rw = 4;
inline bool QueryUserPrivilege::_internal_has_servlet_rw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QueryUserPrivilege::has_servlet_rw() const {
  return _internal_has_servlet_rw();
}
inline void QueryUserPrivilege::clear_servlet_rw() {
  _impl_.servlet_rw_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::sirius::proto::RW QueryUserPrivilege::_internal_servlet_rw() const {
  return static_cast< ::sirius::proto::RW >(_impl_.servlet_rw_);
}
inline ::sirius::proto::RW QueryUserPrivilege::servlet_rw() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryUserPrivilege.servlet_rw)
  return _internal_servlet_rw();
}
inline void QueryUserPrivilege::_internal_set_servlet_rw(::sirius::proto::RW value) {
  assert(::sirius::proto::RW_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.servlet_rw_ = value;
}
inline void QueryUserPrivilege::set_servlet_rw(::sirius::proto::RW value) {
  _internal_set_servlet_rw(value);
  // @@protoc_insertion_point(field_set:sirius.proto.QueryUserPrivilege.servlet_rw)
}

// optional string password = 5;
inline bool QueryUserPrivilege::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QueryUserPrivilege::has_password() const {
  return _internal_has_password();
}
inline void QueryUserPrivilege::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& QueryUserPrivilege::password() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryUserPrivilege.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryUserPrivilege::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryUserPrivilege.password)
}
inline std::string* QueryUserPrivilege::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryUserPrivilege.password)
  return _s;
}
inline const std::string& QueryUserPrivilege::_internal_password() const {
  return _impl_.password_.Get();
}
inline void QueryUserPrivilege::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryUserPrivilege::release_password() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryUserPrivilege.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryUserPrivilege::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryUserPrivilege.password)
}

// -------------------------------------------------------------------

// QueryInstance

// required string address = 1;
inline bool QueryInstance::_internal_has_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QueryInstance::has_address() const {
  return _internal_has_address();
}
inline void QueryInstance::clear_address() {
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QueryInstance::address() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.address)
}
inline std::string* QueryInstance::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.address)
  return _s;
}
inline const std::string& QueryInstance::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryInstance::_internal_set_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_address() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_address() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.address)
}

// optional string app_name = 2;
inline bool QueryInstance::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QueryInstance::has_app_name() const {
  return _internal_has_app_name();
}
inline void QueryInstance::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& QueryInstance::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.app_name)
}
inline std::string* QueryInstance::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.app_name)
  return _s;
}
inline const std::string& QueryInstance::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void QueryInstance::_internal_set_app_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_name_.IsDefault()) {
    _impl_.app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.app_name)
}

// optional string zone_name = 3;
inline bool QueryInstance::_internal_has_zone_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QueryInstance::has_zone_name() const {
  return _internal_has_zone_name();
}
inline void QueryInstance::clear_zone_name() {
  _impl_.zone_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& QueryInstance::zone_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.zone_name)
  return _internal_zone_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_zone_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.zone_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.zone_name)
}
inline std::string* QueryInstance::mutable_zone_name() {
  std::string* _s = _internal_mutable_zone_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.zone_name)
  return _s;
}
inline const std::string& QueryInstance::_internal_zone_name() const {
  return _impl_.zone_name_.Get();
}
inline void QueryInstance::_internal_set_zone_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zone_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_zone_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.zone_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_zone_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.zone_name)
  if (!_internal_has_zone_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.zone_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_name_.IsDefault()) {
    _impl_.zone_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_zone_name(std::string* zone_name) {
  if (zone_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.zone_name_.SetAllocated(zone_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_name_.IsDefault()) {
    _impl_.zone_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.zone_name)
}

// optional string servlet_name = 4;
inline bool QueryInstance::_internal_has_servlet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QueryInstance::has_servlet_name() const {
  return _internal_has_servlet_name();
}
inline void QueryInstance::clear_servlet_name() {
  _impl_.servlet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& QueryInstance::servlet_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.servlet_name)
  return _internal_servlet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_servlet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.servlet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.servlet_name)
}
inline std::string* QueryInstance::mutable_servlet_name() {
  std::string* _s = _internal_mutable_servlet_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.servlet_name)
  return _s;
}
inline const std::string& QueryInstance::_internal_servlet_name() const {
  return _impl_.servlet_name_.Get();
}
inline void QueryInstance::_internal_set_servlet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.servlet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_servlet_name() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.servlet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_servlet_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.servlet_name)
  if (!_internal_has_servlet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.servlet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_servlet_name(std::string* servlet_name) {
  if (servlet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.servlet_name_.SetAllocated(servlet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.servlet_name)
}

// optional string env = 5;
inline bool QueryInstance::_internal_has_env() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QueryInstance::has_env() const {
  return _internal_has_env();
}
inline void QueryInstance::clear_env() {
  _impl_.env_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& QueryInstance::env() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.env)
  return _internal_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_env(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.env_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.env)
}
inline std::string* QueryInstance::mutable_env() {
  std::string* _s = _internal_mutable_env();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.env)
  return _s;
}
inline const std::string& QueryInstance::_internal_env() const {
  return _impl_.env_.Get();
}
inline void QueryInstance::_internal_set_env(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.env_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_env() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.env_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_env() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.env)
  if (!_internal_has_env()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.env_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_env(std::string* env) {
  if (env != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.env_.SetAllocated(env, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.env_.IsDefault()) {
    _impl_.env_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.env)
}

// optional string color = 6;
inline bool QueryInstance::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QueryInstance::has_color() const {
  return _internal_has_color();
}
inline void QueryInstance::clear_color() {
  _impl_.color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& QueryInstance::color() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryInstance::set_color(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.color)
}
inline std::string* QueryInstance::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:sirius.proto.QueryInstance.color)
  return _s;
}
inline const std::string& QueryInstance::_internal_color() const {
  return _impl_.color_.Get();
}
inline void QueryInstance::_internal_set_color(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInstance::_internal_mutable_color() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryInstance::release_color() {
  // @@protoc_insertion_point(field_release:sirius.proto.QueryInstance.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void QueryInstance::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.QueryInstance.color)
}

// optional int64 version = 7;
inline bool QueryInstance::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QueryInstance::has_version() const {
  return _internal_has_version();
}
inline void QueryInstance::clear_version() {
  _impl_.version_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t QueryInstance::_internal_version() const {
  return _impl_.version_;
}
inline int64_t QueryInstance::version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.version)
  return _internal_version();
}
inline void QueryInstance::_internal_set_version(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.version_ = value;
}
inline void QueryInstance::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.version)
}

// optional .sirius.proto.Status status = 8;
inline bool QueryInstance::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QueryInstance::has_status() const {
  return _internal_has_status();
}
inline void QueryInstance::clear_status() {
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::sirius::proto::Status QueryInstance::_internal_status() const {
  return static_cast< ::sirius::proto::Status >(_impl_.status_);
}
inline ::sirius::proto::Status QueryInstance::status() const {
  // @@protoc_insertion_point(field_get:sirius.proto.QueryInstance.status)
  return _internal_status();
}
inline void QueryInstance::_internal_set_status(::sirius::proto::Status value) {
  assert(::sirius::proto::Status_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.status_ = value;
}
inline void QueryInstance::set_status(::sirius::proto::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sirius.proto.QueryInstance.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sirius::proto::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::Status>() {
  return ::sirius::proto::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2estruct_2eproto
