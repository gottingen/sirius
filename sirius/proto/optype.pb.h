// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/optype.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2foptype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2foptype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2foptype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2foptype_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2foptype_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

enum OpType : int {
  OP_NONE = 0,
  OP_CREATE_USER = 9,
  OP_ADD_PRIVILEGE = 10,
  OP_DROP_USER = 11,
  OP_DROP_PRIVILEGE = 12,
  OP_CREATE_NAMESPACE = 13,
  OP_DROP_NAMESPACE = 14,
  OP_MODIFY_NAMESPACE = 15,
  OP_GEN_ID_FOR_AUTO_INCREMENT = 16,
  OP_UPDATE_FOR_AUTO_INCREMENT = 17,
  OP_SET_INSTANCE_MIGRATE = 18,
  OP_ADD_ID_FOR_AUTO_INCREMENT = 19,
  OP_DROP_ID_FOR_AUTO_INCREMENT = 20,
  OP_SET_INSTANCE_STATUS = 21,
  OP_MODIFY_RESOURCE_TAG = 22,
  OP_GEN_TSO = 23,
  OP_RESET_TSO = 24,
  OP_UPDATE_TSO = 25,
  OP_QUERY_TSO_INFO = 26,
  OP_UPDATE_INSTANCE_PARAM = 27,
  OP_UPDATE_MAIN_LOGICAL_ROOM = 28,
  OP_CREATE_ZONE = 29,
  OP_DROP_ZONE = 30,
  OP_MODIFY_ZONE = 31,
  OP_CREATE_SERVLET = 32,
  OP_DROP_SERVLET = 33,
  OP_MODIFY_SERVLET = 34,
  OP_CREATE_CONFIG = 38,
  OP_REMOVE_CONFIG = 39
};
bool OpType_IsValid(int value);
constexpr OpType OpType_MIN = OP_NONE;
constexpr OpType OpType_MAX = OP_REMOVE_CONFIG;
constexpr int OpType_ARRAYSIZE = OpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor();
template<typename T>
inline const std::string& OpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpType_descriptor(), enum_t_value);
}
inline bool OpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpType>(
    OpType_descriptor(), name, value);
}
enum QueryOpType : int {
  QUERY_USER_PRIVILEGE = 4,
  QUERY_APP = 5,
  QUERY_PRIVILEGE_FLATTEN = 7,
  QUERY_INSTANCE_PARAM = 11,
  QUERY_ZONE = 12,
  QUERY_SERVLET = 13,
  QUERY_GET_CONFIG = 17,
  QUERY_LIST_CONFIG_VERSION = 18,
  QUERY_LIST_CONFIG = 19
};
bool QueryOpType_IsValid(int value);
constexpr QueryOpType QueryOpType_MIN = QUERY_USER_PRIVILEGE;
constexpr QueryOpType QueryOpType_MAX = QUERY_LIST_CONFIG;
constexpr int QueryOpType_ARRAYSIZE = QueryOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryOpType_descriptor();
template<typename T>
inline const std::string& QueryOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryOpType_descriptor(), enum_t_value);
}
inline bool QueryOpType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryOpType>(
    QueryOpType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sirius::proto::OpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::OpType>() {
  return ::sirius::proto::OpType_descriptor();
}
template <> struct is_proto_enum< ::sirius::proto::QueryOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::QueryOpType>() {
  return ::sirius::proto::QueryOpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2foptype_2eproto
