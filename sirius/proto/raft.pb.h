// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fraft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fraft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sirius/proto/error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2fraft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2fraft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2fraft_2eproto;
namespace sirius {
namespace proto {
class RaftControlRequest;
struct RaftControlRequestDefaultTypeInternal;
extern RaftControlRequestDefaultTypeInternal _RaftControlRequest_default_instance_;
class RaftControlResponse;
struct RaftControlResponseDefaultTypeInternal;
extern RaftControlResponseDefaultTypeInternal _RaftControlResponse_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::RaftControlRequest* Arena::CreateMaybeMessage<::sirius::proto::RaftControlRequest>(Arena*);
template<> ::sirius::proto::RaftControlResponse* Arena::CreateMaybeMessage<::sirius::proto::RaftControlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

enum RaftControlOp : int {
  SetPeer = 1,
  TransLeader = 2,
  SnapShot = 3,
  GetLeader = 4,
  ShutDown = 5,
  Vote = 6,
  ResetVoteTime = 7,
  ListPeer = 8
};
bool RaftControlOp_IsValid(int value);
constexpr RaftControlOp RaftControlOp_MIN = SetPeer;
constexpr RaftControlOp RaftControlOp_MAX = ListPeer;
constexpr int RaftControlOp_ARRAYSIZE = RaftControlOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftControlOp_descriptor();
template<typename T>
inline const std::string& RaftControlOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RaftControlOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RaftControlOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RaftControlOp_descriptor(), enum_t_value);
}
inline bool RaftControlOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RaftControlOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RaftControlOp>(
    RaftControlOp_descriptor(), name, value);
}
enum RecoverOpt : int {
  DO_NONE = 0,
  DO_REMOVE_ILLEGAL_PEER = 1,
  DO_REMOVE_PEER = 2,
  DO_SET_PEER = 3,
  DO_INIT_REGION = 4
};
bool RecoverOpt_IsValid(int value);
constexpr RecoverOpt RecoverOpt_MIN = DO_NONE;
constexpr RecoverOpt RecoverOpt_MAX = DO_INIT_REGION;
constexpr int RecoverOpt_ARRAYSIZE = RecoverOpt_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoverOpt_descriptor();
template<typename T>
inline const std::string& RecoverOpt_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecoverOpt>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecoverOpt_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecoverOpt_descriptor(), enum_t_value);
}
inline bool RecoverOpt_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecoverOpt* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecoverOpt>(
    RecoverOpt_descriptor(), name, value);
}
// ===================================================================

class RaftControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.RaftControlRequest) */ {
 public:
  inline RaftControlRequest() : RaftControlRequest(nullptr) {}
  ~RaftControlRequest() override;
  explicit PROTOBUF_CONSTEXPR RaftControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftControlRequest(const RaftControlRequest& from);
  RaftControlRequest(RaftControlRequest&& from) noexcept
    : RaftControlRequest() {
    *this = ::std::move(from);
  }

  inline RaftControlRequest& operator=(const RaftControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftControlRequest& operator=(RaftControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftControlRequest* internal_default_instance() {
    return reinterpret_cast<const RaftControlRequest*>(
               &_RaftControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaftControlRequest& a, RaftControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftControlRequest& from) {
    RaftControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.RaftControlRequest";
  }
  protected:
  explicit RaftControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPeersFieldNumber = 4,
    kNewPeersFieldNumber = 5,
    kNewLeaderFieldNumber = 3,
    kRegionIdFieldNumber = 2,
    kElectionTimeFieldNumber = 6,
    kForceFieldNumber = 7,
    kOpTypeFieldNumber = 1,
  };
  // repeated string old_peers = 4;
  int old_peers_size() const;
  private:
  int _internal_old_peers_size() const;
  public:
  void clear_old_peers();
  const std::string& old_peers(int index) const;
  std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const std::string& value);
  void set_old_peers(int index, std::string&& value);
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  std::string* add_old_peers();
  void add_old_peers(const std::string& value);
  void add_old_peers(std::string&& value);
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& old_peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_old_peers();
  private:
  const std::string& _internal_old_peers(int index) const;
  std::string* _internal_add_old_peers();
  public:

  // repeated string new_peers = 5;
  int new_peers_size() const;
  private:
  int _internal_new_peers_size() const;
  public:
  void clear_new_peers();
  const std::string& new_peers(int index) const;
  std::string* mutable_new_peers(int index);
  void set_new_peers(int index, const std::string& value);
  void set_new_peers(int index, std::string&& value);
  void set_new_peers(int index, const char* value);
  void set_new_peers(int index, const char* value, size_t size);
  std::string* add_new_peers();
  void add_new_peers(const std::string& value);
  void add_new_peers(std::string&& value);
  void add_new_peers(const char* value);
  void add_new_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& new_peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_new_peers();
  private:
  const std::string& _internal_new_peers(int index) const;
  std::string* _internal_add_new_peers();
  public:

  // optional string new_leader = 3;
  bool has_new_leader() const;
  private:
  bool _internal_has_new_leader() const;
  public:
  void clear_new_leader();
  const std::string& new_leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_leader();
  PROTOBUF_NODISCARD std::string* release_new_leader();
  void set_allocated_new_leader(std::string* new_leader);
  private:
  const std::string& _internal_new_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_leader(const std::string& value);
  std::string* _internal_mutable_new_leader();
  public:

  // optional int64 region_id = 2;
  bool has_region_id() const;
  private:
  bool _internal_has_region_id() const;
  public:
  void clear_region_id();
  int64_t region_id() const;
  void set_region_id(int64_t value);
  private:
  int64_t _internal_region_id() const;
  void _internal_set_region_id(int64_t value);
  public:

  // optional int64 election_time = 6;
  bool has_election_time() const;
  private:
  bool _internal_has_election_time() const;
  public:
  void clear_election_time();
  int64_t election_time() const;
  void set_election_time(int64_t value);
  private:
  int64_t _internal_election_time() const;
  void _internal_set_election_time(int64_t value);
  public:

  // optional bool force = 7;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // required .sirius.proto.RaftControlOp op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::RaftControlOp op_type() const;
  void set_op_type(::sirius::proto::RaftControlOp value);
  private:
  ::sirius::proto::RaftControlOp _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::RaftControlOp value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.RaftControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> old_peers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> new_peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_leader_;
    int64_t region_id_;
    int64_t election_time_;
    bool force_;
    int op_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fraft_2eproto;
};
// -------------------------------------------------------------------

class RaftControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.RaftControlResponse) */ {
 public:
  inline RaftControlResponse() : RaftControlResponse(nullptr) {}
  ~RaftControlResponse() override;
  explicit PROTOBUF_CONSTEXPR RaftControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftControlResponse(const RaftControlResponse& from);
  RaftControlResponse(RaftControlResponse&& from) noexcept
    : RaftControlResponse() {
    *this = ::std::move(from);
  }

  inline RaftControlResponse& operator=(const RaftControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftControlResponse& operator=(RaftControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftControlResponse* internal_default_instance() {
    return reinterpret_cast<const RaftControlResponse*>(
               &_RaftControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RaftControlResponse& a, RaftControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftControlResponse& from) {
    RaftControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.RaftControlResponse";
  }
  protected:
  explicit RaftControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 5,
    kLeaderFieldNumber = 3,
    kErrmsgFieldNumber = 4,
    kRegionIdFieldNumber = 1,
    kErrcodeFieldNumber = 2,
  };
  // repeated string peers = 5;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  const std::string& peers(int index) const;
  std::string* mutable_peers(int index);
  void set_peers(int index, const std::string& value);
  void set_peers(int index, std::string&& value);
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  std::string* add_peers();
  void add_peers(const std::string& value);
  void add_peers(std::string&& value);
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peers();
  private:
  const std::string& _internal_peers(int index) const;
  std::string* _internal_add_peers();
  public:

  // optional string leader = 3;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  PROTOBUF_NODISCARD std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // optional string errmsg = 4;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // required int64 region_id = 1;
  bool has_region_id() const;
  private:
  bool _internal_has_region_id() const;
  public:
  void clear_region_id();
  int64_t region_id() const;
  void set_region_id(int64_t value);
  private:
  int64_t _internal_region_id() const;
  void _internal_set_region_id(int64_t value);
  public:

  // required .sirius.proto.ErrCode errcode = 2;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.RaftControlResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int64_t region_id_;
    int errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fraft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaftControlRequest

// required .sirius.proto.RaftControlOp op_type = 1;
inline bool RaftControlRequest::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RaftControlRequest::has_op_type() const {
  return _internal_has_op_type();
}
inline void RaftControlRequest::clear_op_type() {
  _impl_.op_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::sirius::proto::RaftControlOp RaftControlRequest::_internal_op_type() const {
  return static_cast< ::sirius::proto::RaftControlOp >(_impl_.op_type_);
}
inline ::sirius::proto::RaftControlOp RaftControlRequest::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.op_type)
  return _internal_op_type();
}
inline void RaftControlRequest::_internal_set_op_type(::sirius::proto::RaftControlOp value) {
  assert(::sirius::proto::RaftControlOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.op_type_ = value;
}
inline void RaftControlRequest::set_op_type(::sirius::proto::RaftControlOp value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.op_type)
}

// optional int64 region_id = 2;
inline bool RaftControlRequest::_internal_has_region_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RaftControlRequest::has_region_id() const {
  return _internal_has_region_id();
}
inline void RaftControlRequest::clear_region_id() {
  _impl_.region_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t RaftControlRequest::_internal_region_id() const {
  return _impl_.region_id_;
}
inline int64_t RaftControlRequest::region_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.region_id)
  return _internal_region_id();
}
inline void RaftControlRequest::_internal_set_region_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_id_ = value;
}
inline void RaftControlRequest::set_region_id(int64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.region_id)
}

// optional string new_leader = 3;
inline bool RaftControlRequest::_internal_has_new_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RaftControlRequest::has_new_leader() const {
  return _internal_has_new_leader();
}
inline void RaftControlRequest::clear_new_leader() {
  _impl_.new_leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RaftControlRequest::new_leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.new_leader)
  return _internal_new_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftControlRequest::set_new_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.new_leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.new_leader)
}
inline std::string* RaftControlRequest::mutable_new_leader() {
  std::string* _s = _internal_mutable_new_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlRequest.new_leader)
  return _s;
}
inline const std::string& RaftControlRequest::_internal_new_leader() const {
  return _impl_.new_leader_.Get();
}
inline void RaftControlRequest::_internal_set_new_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_leader_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftControlRequest::_internal_mutable_new_leader() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.new_leader_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftControlRequest::release_new_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.RaftControlRequest.new_leader)
  if (!_internal_has_new_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.new_leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_leader_.IsDefault()) {
    _impl_.new_leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RaftControlRequest::set_allocated_new_leader(std::string* new_leader) {
  if (new_leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.new_leader_.SetAllocated(new_leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_leader_.IsDefault()) {
    _impl_.new_leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.RaftControlRequest.new_leader)
}

// repeated string old_peers = 4;
inline int RaftControlRequest::_internal_old_peers_size() const {
  return _impl_.old_peers_.size();
}
inline int RaftControlRequest::old_peers_size() const {
  return _internal_old_peers_size();
}
inline void RaftControlRequest::clear_old_peers() {
  _impl_.old_peers_.Clear();
}
inline std::string* RaftControlRequest::add_old_peers() {
  std::string* _s = _internal_add_old_peers();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.RaftControlRequest.old_peers)
  return _s;
}
inline const std::string& RaftControlRequest::_internal_old_peers(int index) const {
  return _impl_.old_peers_.Get(index);
}
inline const std::string& RaftControlRequest::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.old_peers)
  return _internal_old_peers(index);
}
inline std::string* RaftControlRequest::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlRequest.old_peers)
  return _impl_.old_peers_.Mutable(index);
}
inline void RaftControlRequest::set_old_peers(int index, const std::string& value) {
  _impl_.old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::set_old_peers(int index, std::string&& value) {
  _impl_.old_peers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::set_old_peers(int index, const char* value, size_t size) {
  _impl_.old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.RaftControlRequest.old_peers)
}
inline std::string* RaftControlRequest::_internal_add_old_peers() {
  return _impl_.old_peers_.Add();
}
inline void RaftControlRequest::add_old_peers(const std::string& value) {
  _impl_.old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::add_old_peers(std::string&& value) {
  _impl_.old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.RaftControlRequest.old_peers)
}
inline void RaftControlRequest::add_old_peers(const char* value, size_t size) {
  _impl_.old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.RaftControlRequest.old_peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RaftControlRequest::old_peers() const {
  // @@protoc_insertion_point(field_list:sirius.proto.RaftControlRequest.old_peers)
  return _impl_.old_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RaftControlRequest::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.RaftControlRequest.old_peers)
  return &_impl_.old_peers_;
}

// repeated string new_peers = 5;
inline int RaftControlRequest::_internal_new_peers_size() const {
  return _impl_.new_peers_.size();
}
inline int RaftControlRequest::new_peers_size() const {
  return _internal_new_peers_size();
}
inline void RaftControlRequest::clear_new_peers() {
  _impl_.new_peers_.Clear();
}
inline std::string* RaftControlRequest::add_new_peers() {
  std::string* _s = _internal_add_new_peers();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.RaftControlRequest.new_peers)
  return _s;
}
inline const std::string& RaftControlRequest::_internal_new_peers(int index) const {
  return _impl_.new_peers_.Get(index);
}
inline const std::string& RaftControlRequest::new_peers(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.new_peers)
  return _internal_new_peers(index);
}
inline std::string* RaftControlRequest::mutable_new_peers(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlRequest.new_peers)
  return _impl_.new_peers_.Mutable(index);
}
inline void RaftControlRequest::set_new_peers(int index, const std::string& value) {
  _impl_.new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::set_new_peers(int index, std::string&& value) {
  _impl_.new_peers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::set_new_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::set_new_peers(int index, const char* value, size_t size) {
  _impl_.new_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.RaftControlRequest.new_peers)
}
inline std::string* RaftControlRequest::_internal_add_new_peers() {
  return _impl_.new_peers_.Add();
}
inline void RaftControlRequest::add_new_peers(const std::string& value) {
  _impl_.new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::add_new_peers(std::string&& value) {
  _impl_.new_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::add_new_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.new_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.RaftControlRequest.new_peers)
}
inline void RaftControlRequest::add_new_peers(const char* value, size_t size) {
  _impl_.new_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.RaftControlRequest.new_peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RaftControlRequest::new_peers() const {
  // @@protoc_insertion_point(field_list:sirius.proto.RaftControlRequest.new_peers)
  return _impl_.new_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RaftControlRequest::mutable_new_peers() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.RaftControlRequest.new_peers)
  return &_impl_.new_peers_;
}

// optional int64 election_time = 6;
inline bool RaftControlRequest::_internal_has_election_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RaftControlRequest::has_election_time() const {
  return _internal_has_election_time();
}
inline void RaftControlRequest::clear_election_time() {
  _impl_.election_time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t RaftControlRequest::_internal_election_time() const {
  return _impl_.election_time_;
}
inline int64_t RaftControlRequest::election_time() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.election_time)
  return _internal_election_time();
}
inline void RaftControlRequest::_internal_set_election_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.election_time_ = value;
}
inline void RaftControlRequest::set_election_time(int64_t value) {
  _internal_set_election_time(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.election_time)
}

// optional bool force = 7;
inline bool RaftControlRequest::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RaftControlRequest::has_force() const {
  return _internal_has_force();
}
inline void RaftControlRequest::clear_force() {
  _impl_.force_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool RaftControlRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool RaftControlRequest::force() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlRequest.force)
  return _internal_force();
}
inline void RaftControlRequest::_internal_set_force(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.force_ = value;
}
inline void RaftControlRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlRequest.force)
}

// -------------------------------------------------------------------

// RaftControlResponse

// required int64 region_id = 1;
inline bool RaftControlResponse::_internal_has_region_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RaftControlResponse::has_region_id() const {
  return _internal_has_region_id();
}
inline void RaftControlResponse::clear_region_id() {
  _impl_.region_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t RaftControlResponse::_internal_region_id() const {
  return _impl_.region_id_;
}
inline int64_t RaftControlResponse::region_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlResponse.region_id)
  return _internal_region_id();
}
inline void RaftControlResponse::_internal_set_region_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.region_id_ = value;
}
inline void RaftControlResponse::set_region_id(int64_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.region_id)
}

// required .sirius.proto.ErrCode errcode = 2;
inline bool RaftControlResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RaftControlResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void RaftControlResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sirius::proto::ErrCode RaftControlResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode RaftControlResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlResponse.errcode)
  return _internal_errcode();
}
inline void RaftControlResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.errcode_ = value;
}
inline void RaftControlResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.errcode)
}

// optional string leader = 3;
inline bool RaftControlResponse::_internal_has_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RaftControlResponse::has_leader() const {
  return _internal_has_leader();
}
inline void RaftControlResponse::clear_leader() {
  _impl_.leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RaftControlResponse::leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlResponse.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftControlResponse::set_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.leader)
}
inline std::string* RaftControlResponse::mutable_leader() {
  std::string* _s = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlResponse.leader)
  return _s;
}
inline const std::string& RaftControlResponse::_internal_leader() const {
  return _impl_.leader_.Get();
}
inline void RaftControlResponse::_internal_set_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.leader_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftControlResponse::_internal_mutable_leader() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.leader_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftControlResponse::release_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.RaftControlResponse.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RaftControlResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leader_.SetAllocated(leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.RaftControlResponse.leader)
}

// optional string errmsg = 4;
inline bool RaftControlResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RaftControlResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void RaftControlResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RaftControlResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftControlResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.errmsg)
}
inline std::string* RaftControlResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlResponse.errmsg)
  return _s;
}
inline const std::string& RaftControlResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void RaftControlResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftControlResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftControlResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.RaftControlResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RaftControlResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.RaftControlResponse.errmsg)
}

// repeated string peers = 5;
inline int RaftControlResponse::_internal_peers_size() const {
  return _impl_.peers_.size();
}
inline int RaftControlResponse::peers_size() const {
  return _internal_peers_size();
}
inline void RaftControlResponse::clear_peers() {
  _impl_.peers_.Clear();
}
inline std::string* RaftControlResponse::add_peers() {
  std::string* _s = _internal_add_peers();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.RaftControlResponse.peers)
  return _s;
}
inline const std::string& RaftControlResponse::_internal_peers(int index) const {
  return _impl_.peers_.Get(index);
}
inline const std::string& RaftControlResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.RaftControlResponse.peers)
  return _internal_peers(index);
}
inline std::string* RaftControlResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.RaftControlResponse.peers)
  return _impl_.peers_.Mutable(index);
}
inline void RaftControlResponse::set_peers(int index, const std::string& value) {
  _impl_.peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::set_peers(int index, std::string&& value) {
  _impl_.peers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::set_peers(int index, const char* value, size_t size) {
  _impl_.peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.RaftControlResponse.peers)
}
inline std::string* RaftControlResponse::_internal_add_peers() {
  return _impl_.peers_.Add();
}
inline void RaftControlResponse::add_peers(const std::string& value) {
  _impl_.peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::add_peers(std::string&& value) {
  _impl_.peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::add_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.RaftControlResponse.peers)
}
inline void RaftControlResponse::add_peers(const char* value, size_t size) {
  _impl_.peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.RaftControlResponse.peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RaftControlResponse::peers() const {
  // @@protoc_insertion_point(field_list:sirius.proto.RaftControlResponse.peers)
  return _impl_.peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RaftControlResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.RaftControlResponse.peers)
  return &_impl_.peers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sirius::proto::RaftControlOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::RaftControlOp>() {
  return ::sirius::proto::RaftControlOp_descriptor();
}
template <> struct is_proto_enum< ::sirius::proto::RecoverOpt> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::RecoverOpt>() {
  return ::sirius::proto::RecoverOpt_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fraft_2eproto
