// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/tso.struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2ftso_2estruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2ftso_2estruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sirius/proto/optype.pb.h"
#include "sirius/proto/error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2ftso_2estruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2ftso_2estruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2ftso_2estruct_2eproto;
namespace sirius {
namespace proto {
class TsoRequest;
struct TsoRequestDefaultTypeInternal;
extern TsoRequestDefaultTypeInternal _TsoRequest_default_instance_;
class TsoResponse;
struct TsoResponseDefaultTypeInternal;
extern TsoResponseDefaultTypeInternal _TsoResponse_default_instance_;
class TsoTimestamp;
struct TsoTimestampDefaultTypeInternal;
extern TsoTimestampDefaultTypeInternal _TsoTimestamp_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::TsoRequest* Arena::CreateMaybeMessage<::sirius::proto::TsoRequest>(Arena*);
template<> ::sirius::proto::TsoResponse* Arena::CreateMaybeMessage<::sirius::proto::TsoResponse>(Arena*);
template<> ::sirius::proto::TsoTimestamp* Arena::CreateMaybeMessage<::sirius::proto::TsoTimestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

// ===================================================================

class TsoTimestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.TsoTimestamp) */ {
 public:
  inline TsoTimestamp() : TsoTimestamp(nullptr) {}
  ~TsoTimestamp() override;
  explicit PROTOBUF_CONSTEXPR TsoTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TsoTimestamp(const TsoTimestamp& from);
  TsoTimestamp(TsoTimestamp&& from) noexcept
    : TsoTimestamp() {
    *this = ::std::move(from);
  }

  inline TsoTimestamp& operator=(const TsoTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsoTimestamp& operator=(TsoTimestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TsoTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const TsoTimestamp* internal_default_instance() {
    return reinterpret_cast<const TsoTimestamp*>(
               &_TsoTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TsoTimestamp& a, TsoTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(TsoTimestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsoTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TsoTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TsoTimestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TsoTimestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TsoTimestamp& from) {
    TsoTimestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsoTimestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.TsoTimestamp";
  }
  protected:
  explicit TsoTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhysicalFieldNumber = 1,
    kLogicalFieldNumber = 2,
  };
  // optional int64 physical = 1;
  bool has_physical() const;
  private:
  bool _internal_has_physical() const;
  public:
  void clear_physical();
  int64_t physical() const;
  void set_physical(int64_t value);
  private:
  int64_t _internal_physical() const;
  void _internal_set_physical(int64_t value);
  public:

  // optional int64 logical = 2;
  bool has_logical() const;
  private:
  bool _internal_has_logical() const;
  public:
  void clear_logical();
  int64_t logical() const;
  void set_logical(int64_t value);
  private:
  int64_t _internal_logical() const;
  void _internal_set_logical(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.TsoTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t physical_;
    int64_t logical_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2ftso_2estruct_2eproto;
};
// -------------------------------------------------------------------

class TsoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.TsoRequest) */ {
 public:
  inline TsoRequest() : TsoRequest(nullptr) {}
  ~TsoRequest() override;
  explicit PROTOBUF_CONSTEXPR TsoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TsoRequest(const TsoRequest& from);
  TsoRequest(TsoRequest&& from) noexcept
    : TsoRequest() {
    *this = ::std::move(from);
  }

  inline TsoRequest& operator=(const TsoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsoRequest& operator=(TsoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TsoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TsoRequest* internal_default_instance() {
    return reinterpret_cast<const TsoRequest*>(
               &_TsoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TsoRequest& a, TsoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TsoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TsoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TsoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TsoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TsoRequest& from) {
    TsoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.TsoRequest";
  }
  protected:
  explicit TsoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTimestampFieldNumber = 3,
    kCountFieldNumber = 2,
    kOpTypeFieldNumber = 1,
    kForceFieldNumber = 5,
    kSavePhysicalFieldNumber = 4,
  };
  // optional .sirius.proto.TsoTimestamp current_timestamp = 3;
  bool has_current_timestamp() const;
  private:
  bool _internal_has_current_timestamp() const;
  public:
  void clear_current_timestamp();
  const ::sirius::proto::TsoTimestamp& current_timestamp() const;
  PROTOBUF_NODISCARD ::sirius::proto::TsoTimestamp* release_current_timestamp();
  ::sirius::proto::TsoTimestamp* mutable_current_timestamp();
  void set_allocated_current_timestamp(::sirius::proto::TsoTimestamp* current_timestamp);
  private:
  const ::sirius::proto::TsoTimestamp& _internal_current_timestamp() const;
  ::sirius::proto::TsoTimestamp* _internal_mutable_current_timestamp();
  public:
  void unsafe_arena_set_allocated_current_timestamp(
      ::sirius::proto::TsoTimestamp* current_timestamp);
  ::sirius::proto::TsoTimestamp* unsafe_arena_release_current_timestamp();

  // optional int64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // required .sirius.proto.OpType op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::OpType op_type() const;
  void set_op_type(::sirius::proto::OpType value);
  private:
  ::sirius::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::OpType value);
  public:

  // optional bool force = 5;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // optional int64 save_physical = 4;
  bool has_save_physical() const;
  private:
  bool _internal_has_save_physical() const;
  public:
  void clear_save_physical();
  int64_t save_physical() const;
  void set_save_physical(int64_t value);
  private:
  int64_t _internal_save_physical() const;
  void _internal_set_save_physical(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.TsoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::sirius::proto::TsoTimestamp* current_timestamp_;
    int64_t count_;
    int op_type_;
    bool force_;
    int64_t save_physical_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2ftso_2estruct_2eproto;
};
// -------------------------------------------------------------------

class TsoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.TsoResponse) */ {
 public:
  inline TsoResponse() : TsoResponse(nullptr) {}
  ~TsoResponse() override;
  explicit PROTOBUF_CONSTEXPR TsoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TsoResponse(const TsoResponse& from);
  TsoResponse(TsoResponse&& from) noexcept
    : TsoResponse() {
    *this = ::std::move(from);
  }

  inline TsoResponse& operator=(const TsoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TsoResponse& operator=(TsoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TsoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TsoResponse* internal_default_instance() {
    return reinterpret_cast<const TsoResponse*>(
               &_TsoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TsoResponse& a, TsoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TsoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TsoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TsoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TsoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TsoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TsoResponse& from) {
    TsoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TsoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.TsoResponse";
  }
  protected:
  explicit TsoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 5,
    kLeaderFieldNumber = 8,
    kStartTimestampFieldNumber = 3,
    kOpTypeFieldNumber = 1,
    kErrcodeFieldNumber = 2,
    kCountFieldNumber = 4,
    kSavePhysicalFieldNumber = 6,
    kSystemTimeFieldNumber = 7,
  };
  // optional string errmsg = 5;
  bool has_errmsg() const;
  private:
  bool _internal_has_errmsg() const;
  public:
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // optional string leader = 8;
  bool has_leader() const;
  private:
  bool _internal_has_leader() const;
  public:
  void clear_leader();
  const std::string& leader() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader();
  PROTOBUF_NODISCARD std::string* release_leader();
  void set_allocated_leader(std::string* leader);
  private:
  const std::string& _internal_leader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader(const std::string& value);
  std::string* _internal_mutable_leader();
  public:

  // optional .sirius.proto.TsoTimestamp start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  const ::sirius::proto::TsoTimestamp& start_timestamp() const;
  PROTOBUF_NODISCARD ::sirius::proto::TsoTimestamp* release_start_timestamp();
  ::sirius::proto::TsoTimestamp* mutable_start_timestamp();
  void set_allocated_start_timestamp(::sirius::proto::TsoTimestamp* start_timestamp);
  private:
  const ::sirius::proto::TsoTimestamp& _internal_start_timestamp() const;
  ::sirius::proto::TsoTimestamp* _internal_mutable_start_timestamp();
  public:
  void unsafe_arena_set_allocated_start_timestamp(
      ::sirius::proto::TsoTimestamp* start_timestamp);
  ::sirius::proto::TsoTimestamp* unsafe_arena_release_start_timestamp();

  // required .sirius.proto.OpType op_type = 1;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  ::sirius::proto::OpType op_type() const;
  void set_op_type(::sirius::proto::OpType value);
  private:
  ::sirius::proto::OpType _internal_op_type() const;
  void _internal_set_op_type(::sirius::proto::OpType value);
  public:

  // optional .sirius.proto.ErrCode errcode = 2;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::sirius::proto::ErrCode errcode() const;
  void set_errcode(::sirius::proto::ErrCode value);
  private:
  ::sirius::proto::ErrCode _internal_errcode() const;
  void _internal_set_errcode(::sirius::proto::ErrCode value);
  public:

  // optional int64 count = 4;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // optional int64 save_physical = 6;
  bool has_save_physical() const;
  private:
  bool _internal_has_save_physical() const;
  public:
  void clear_save_physical();
  int64_t save_physical() const;
  void set_save_physical(int64_t value);
  private:
  int64_t _internal_save_physical() const;
  void _internal_set_save_physical(int64_t value);
  public:

  // optional int64 system_time = 7;
  bool has_system_time() const;
  private:
  bool _internal_has_system_time() const;
  public:
  void clear_system_time();
  int64_t system_time() const;
  void set_system_time(int64_t value);
  private:
  int64_t _internal_system_time() const;
  void _internal_set_system_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.TsoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_;
    ::sirius::proto::TsoTimestamp* start_timestamp_;
    int op_type_;
    int errcode_;
    int64_t count_;
    int64_t save_physical_;
    int64_t system_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2ftso_2estruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TsoTimestamp

// optional int64 physical = 1;
inline bool TsoTimestamp::_internal_has_physical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TsoTimestamp::has_physical() const {
  return _internal_has_physical();
}
inline void TsoTimestamp::clear_physical() {
  _impl_.physical_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t TsoTimestamp::_internal_physical() const {
  return _impl_.physical_;
}
inline int64_t TsoTimestamp::physical() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoTimestamp.physical)
  return _internal_physical();
}
inline void TsoTimestamp::_internal_set_physical(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.physical_ = value;
}
inline void TsoTimestamp::set_physical(int64_t value) {
  _internal_set_physical(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoTimestamp.physical)
}

// optional int64 logical = 2;
inline bool TsoTimestamp::_internal_has_logical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TsoTimestamp::has_logical() const {
  return _internal_has_logical();
}
inline void TsoTimestamp::clear_logical() {
  _impl_.logical_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t TsoTimestamp::_internal_logical() const {
  return _impl_.logical_;
}
inline int64_t TsoTimestamp::logical() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoTimestamp.logical)
  return _internal_logical();
}
inline void TsoTimestamp::_internal_set_logical(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.logical_ = value;
}
inline void TsoTimestamp::set_logical(int64_t value) {
  _internal_set_logical(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoTimestamp.logical)
}

// -------------------------------------------------------------------

// TsoRequest

// required .sirius.proto.OpType op_type = 1;
inline bool TsoRequest::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TsoRequest::has_op_type() const {
  return _internal_has_op_type();
}
inline void TsoRequest::clear_op_type() {
  _impl_.op_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::sirius::proto::OpType TsoRequest::_internal_op_type() const {
  return static_cast< ::sirius::proto::OpType >(_impl_.op_type_);
}
inline ::sirius::proto::OpType TsoRequest::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoRequest.op_type)
  return _internal_op_type();
}
inline void TsoRequest::_internal_set_op_type(::sirius::proto::OpType value) {
  assert(::sirius::proto::OpType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.op_type_ = value;
}
inline void TsoRequest::set_op_type(::sirius::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoRequest.op_type)
}

// optional int64 count = 2;
inline bool TsoRequest::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TsoRequest::has_count() const {
  return _internal_has_count();
}
inline void TsoRequest::clear_count() {
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t TsoRequest::_internal_count() const {
  return _impl_.count_;
}
inline int64_t TsoRequest::count() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoRequest.count)
  return _internal_count();
}
inline void TsoRequest::_internal_set_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}
inline void TsoRequest::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoRequest.count)
}

// optional .sirius.proto.TsoTimestamp current_timestamp = 3;
inline bool TsoRequest::_internal_has_current_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_timestamp_ != nullptr);
  return value;
}
inline bool TsoRequest::has_current_timestamp() const {
  return _internal_has_current_timestamp();
}
inline void TsoRequest::clear_current_timestamp() {
  if (_impl_.current_timestamp_ != nullptr) _impl_.current_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::sirius::proto::TsoTimestamp& TsoRequest::_internal_current_timestamp() const {
  const ::sirius::proto::TsoTimestamp* p = _impl_.current_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::TsoTimestamp&>(
      ::sirius::proto::_TsoTimestamp_default_instance_);
}
inline const ::sirius::proto::TsoTimestamp& TsoRequest::current_timestamp() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoRequest.current_timestamp)
  return _internal_current_timestamp();
}
inline void TsoRequest::unsafe_arena_set_allocated_current_timestamp(
    ::sirius::proto::TsoTimestamp* current_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_timestamp_);
  }
  _impl_.current_timestamp_ = current_timestamp;
  if (current_timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.TsoRequest.current_timestamp)
}
inline ::sirius::proto::TsoTimestamp* TsoRequest::release_current_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sirius::proto::TsoTimestamp* temp = _impl_.current_timestamp_;
  _impl_.current_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::TsoTimestamp* TsoRequest::unsafe_arena_release_current_timestamp() {
  // @@protoc_insertion_point(field_release:sirius.proto.TsoRequest.current_timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sirius::proto::TsoTimestamp* temp = _impl_.current_timestamp_;
  _impl_.current_timestamp_ = nullptr;
  return temp;
}
inline ::sirius::proto::TsoTimestamp* TsoRequest::_internal_mutable_current_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.current_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::TsoTimestamp>(GetArenaForAllocation());
    _impl_.current_timestamp_ = p;
  }
  return _impl_.current_timestamp_;
}
inline ::sirius::proto::TsoTimestamp* TsoRequest::mutable_current_timestamp() {
  ::sirius::proto::TsoTimestamp* _msg = _internal_mutable_current_timestamp();
  // @@protoc_insertion_point(field_mutable:sirius.proto.TsoRequest.current_timestamp)
  return _msg;
}
inline void TsoRequest::set_allocated_current_timestamp(::sirius::proto::TsoTimestamp* current_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.current_timestamp_;
  }
  if (current_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(current_timestamp);
    if (message_arena != submessage_arena) {
      current_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_timestamp_ = current_timestamp;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.TsoRequest.current_timestamp)
}

// optional int64 save_physical = 4;
inline bool TsoRequest::_internal_has_save_physical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TsoRequest::has_save_physical() const {
  return _internal_has_save_physical();
}
inline void TsoRequest::clear_save_physical() {
  _impl_.save_physical_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t TsoRequest::_internal_save_physical() const {
  return _impl_.save_physical_;
}
inline int64_t TsoRequest::save_physical() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoRequest.save_physical)
  return _internal_save_physical();
}
inline void TsoRequest::_internal_set_save_physical(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.save_physical_ = value;
}
inline void TsoRequest::set_save_physical(int64_t value) {
  _internal_set_save_physical(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoRequest.save_physical)
}

// optional bool force = 5;
inline bool TsoRequest::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TsoRequest::has_force() const {
  return _internal_has_force();
}
inline void TsoRequest::clear_force() {
  _impl_.force_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TsoRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool TsoRequest::force() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoRequest.force)
  return _internal_force();
}
inline void TsoRequest::_internal_set_force(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.force_ = value;
}
inline void TsoRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoRequest.force)
}

// -------------------------------------------------------------------

// TsoResponse

// required .sirius.proto.OpType op_type = 1;
inline bool TsoResponse::_internal_has_op_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TsoResponse::has_op_type() const {
  return _internal_has_op_type();
}
inline void TsoResponse::clear_op_type() {
  _impl_.op_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sirius::proto::OpType TsoResponse::_internal_op_type() const {
  return static_cast< ::sirius::proto::OpType >(_impl_.op_type_);
}
inline ::sirius::proto::OpType TsoResponse::op_type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.op_type)
  return _internal_op_type();
}
inline void TsoResponse::_internal_set_op_type(::sirius::proto::OpType value) {
  assert(::sirius::proto::OpType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.op_type_ = value;
}
inline void TsoResponse::set_op_type(::sirius::proto::OpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.op_type)
}

// optional .sirius.proto.ErrCode errcode = 2;
inline bool TsoResponse::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TsoResponse::has_errcode() const {
  return _internal_has_errcode();
}
inline void TsoResponse::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::sirius::proto::ErrCode TsoResponse::_internal_errcode() const {
  return static_cast< ::sirius::proto::ErrCode >(_impl_.errcode_);
}
inline ::sirius::proto::ErrCode TsoResponse::errcode() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.errcode)
  return _internal_errcode();
}
inline void TsoResponse::_internal_set_errcode(::sirius::proto::ErrCode value) {
  assert(::sirius::proto::ErrCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.errcode_ = value;
}
inline void TsoResponse::set_errcode(::sirius::proto::ErrCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.errcode)
}

// optional .sirius.proto.TsoTimestamp start_timestamp = 3;
inline bool TsoResponse::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_timestamp_ != nullptr);
  return value;
}
inline bool TsoResponse::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void TsoResponse::clear_start_timestamp() {
  if (_impl_.start_timestamp_ != nullptr) _impl_.start_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sirius::proto::TsoTimestamp& TsoResponse::_internal_start_timestamp() const {
  const ::sirius::proto::TsoTimestamp* p = _impl_.start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::TsoTimestamp&>(
      ::sirius::proto::_TsoTimestamp_default_instance_);
}
inline const ::sirius::proto::TsoTimestamp& TsoResponse::start_timestamp() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.start_timestamp)
  return _internal_start_timestamp();
}
inline void TsoResponse::unsafe_arena_set_allocated_start_timestamp(
    ::sirius::proto::TsoTimestamp* start_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_timestamp_);
  }
  _impl_.start_timestamp_ = start_timestamp;
  if (start_timestamp) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.TsoResponse.start_timestamp)
}
inline ::sirius::proto::TsoTimestamp* TsoResponse::release_start_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::TsoTimestamp* temp = _impl_.start_timestamp_;
  _impl_.start_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::TsoTimestamp* TsoResponse::unsafe_arena_release_start_timestamp() {
  // @@protoc_insertion_point(field_release:sirius.proto.TsoResponse.start_timestamp)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::TsoTimestamp* temp = _impl_.start_timestamp_;
  _impl_.start_timestamp_ = nullptr;
  return temp;
}
inline ::sirius::proto::TsoTimestamp* TsoResponse::_internal_mutable_start_timestamp() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::TsoTimestamp>(GetArenaForAllocation());
    _impl_.start_timestamp_ = p;
  }
  return _impl_.start_timestamp_;
}
inline ::sirius::proto::TsoTimestamp* TsoResponse::mutable_start_timestamp() {
  ::sirius::proto::TsoTimestamp* _msg = _internal_mutable_start_timestamp();
  // @@protoc_insertion_point(field_mutable:sirius.proto.TsoResponse.start_timestamp)
  return _msg;
}
inline void TsoResponse::set_allocated_start_timestamp(::sirius::proto::TsoTimestamp* start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_timestamp_;
  }
  if (start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_timestamp);
    if (message_arena != submessage_arena) {
      start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.start_timestamp_ = start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.TsoResponse.start_timestamp)
}

// optional int64 count = 4;
inline bool TsoResponse::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TsoResponse::has_count() const {
  return _internal_has_count();
}
inline void TsoResponse::clear_count() {
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t TsoResponse::_internal_count() const {
  return _impl_.count_;
}
inline int64_t TsoResponse::count() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.count)
  return _internal_count();
}
inline void TsoResponse::_internal_set_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.count_ = value;
}
inline void TsoResponse::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.count)
}

// optional string errmsg = 5;
inline bool TsoResponse::_internal_has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TsoResponse::has_errmsg() const {
  return _internal_has_errmsg();
}
inline void TsoResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TsoResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TsoResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.errmsg)
}
inline std::string* TsoResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:sirius.proto.TsoResponse.errmsg)
  return _s;
}
inline const std::string& TsoResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void TsoResponse::_internal_set_errmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* TsoResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* TsoResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:sirius.proto.TsoResponse.errmsg)
  if (!_internal_has_errmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TsoResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.TsoResponse.errmsg)
}

// optional int64 save_physical = 6;
inline bool TsoResponse::_internal_has_save_physical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TsoResponse::has_save_physical() const {
  return _internal_has_save_physical();
}
inline void TsoResponse::clear_save_physical() {
  _impl_.save_physical_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t TsoResponse::_internal_save_physical() const {
  return _impl_.save_physical_;
}
inline int64_t TsoResponse::save_physical() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.save_physical)
  return _internal_save_physical();
}
inline void TsoResponse::_internal_set_save_physical(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.save_physical_ = value;
}
inline void TsoResponse::set_save_physical(int64_t value) {
  _internal_set_save_physical(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.save_physical)
}

// optional int64 system_time = 7;
inline bool TsoResponse::_internal_has_system_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TsoResponse::has_system_time() const {
  return _internal_has_system_time();
}
inline void TsoResponse::clear_system_time() {
  _impl_.system_time_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int64_t TsoResponse::_internal_system_time() const {
  return _impl_.system_time_;
}
inline int64_t TsoResponse::system_time() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.system_time)
  return _internal_system_time();
}
inline void TsoResponse::_internal_set_system_time(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.system_time_ = value;
}
inline void TsoResponse::set_system_time(int64_t value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.system_time)
}

// optional string leader = 8;
inline bool TsoResponse::_internal_has_leader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TsoResponse::has_leader() const {
  return _internal_has_leader();
}
inline void TsoResponse::clear_leader() {
  _impl_.leader_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TsoResponse::leader() const {
  // @@protoc_insertion_point(field_get:sirius.proto.TsoResponse.leader)
  return _internal_leader();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TsoResponse::set_leader(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.leader_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.TsoResponse.leader)
}
inline std::string* TsoResponse::mutable_leader() {
  std::string* _s = _internal_mutable_leader();
  // @@protoc_insertion_point(field_mutable:sirius.proto.TsoResponse.leader)
  return _s;
}
inline const std::string& TsoResponse::_internal_leader() const {
  return _impl_.leader_.Get();
}
inline void TsoResponse::_internal_set_leader(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.leader_.Set(value, GetArenaForAllocation());
}
inline std::string* TsoResponse::_internal_mutable_leader() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.leader_.Mutable(GetArenaForAllocation());
}
inline std::string* TsoResponse::release_leader() {
  // @@protoc_insertion_point(field_release:sirius.proto.TsoResponse.leader)
  if (!_internal_has_leader()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.leader_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TsoResponse::set_allocated_leader(std::string* leader) {
  if (leader != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leader_.SetAllocated(leader, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_.IsDefault()) {
    _impl_.leader_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.TsoResponse.leader)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2ftso_2estruct_2eproto
