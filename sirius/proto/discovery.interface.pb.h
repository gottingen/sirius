// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/discovery.interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2einterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2einterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include "sirius/proto/raft.pb.h"
#include "sirius/proto/discovery.struct.pb.h"
#include "sirius/proto/tso.struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2fdiscovery_2einterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2fdiscovery_2einterface_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2fdiscovery_2einterface_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

// ===================================================================


// ===================================================================

class DiscoveryService_Stub;

class DiscoveryService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DiscoveryService() {};
 public:
  virtual ~DiscoveryService();

  typedef DiscoveryService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void raft_control(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::RaftControlRequest* request,
                       ::sirius::proto::RaftControlResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void discovery_manager(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryManagerRequest* request,
                       ::sirius::proto::DiscoveryManagerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void discovery_query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryQueryRequest* request,
                       ::sirius::proto::DiscoveryQueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void naming(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletNamingRequest* request,
                       ::sirius::proto::ServletNamingResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void tso_service(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::TsoRequest* request,
                       ::sirius::proto::TsoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DiscoveryService);
};

class DiscoveryService_Stub : public DiscoveryService {
 public:
  DiscoveryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DiscoveryService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DiscoveryService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DiscoveryService ------------------------------------------

  void raft_control(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::RaftControlRequest* request,
                       ::sirius::proto::RaftControlResponse* response,
                       ::google::protobuf::Closure* done);
  void discovery_manager(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryManagerRequest* request,
                       ::sirius::proto::DiscoveryManagerResponse* response,
                       ::google::protobuf::Closure* done);
  void discovery_query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryQueryRequest* request,
                       ::sirius::proto::DiscoveryQueryResponse* response,
                       ::google::protobuf::Closure* done);
  void naming(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletNamingRequest* request,
                       ::sirius::proto::ServletNamingResponse* response,
                       ::google::protobuf::Closure* done);
  void tso_service(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::TsoRequest* request,
                       ::sirius::proto::TsoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DiscoveryService_Stub);
};


// -------------------------------------------------------------------

class DiscoveryRouterService_Stub;

class DiscoveryRouterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DiscoveryRouterService() {};
 public:
  virtual ~DiscoveryRouterService();

  typedef DiscoveryRouterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void raft_control(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::RaftControlRequest* request,
                       ::sirius::proto::RaftControlResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void discovery_manager(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryManagerRequest* request,
                       ::sirius::proto::DiscoveryManagerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void discovery_query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryQueryRequest* request,
                       ::sirius::proto::DiscoveryQueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void tso_service(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::TsoRequest* request,
                       ::sirius::proto::TsoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void registry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void cancel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void naming(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletNamingRequest* request,
                       ::sirius::proto::ServletNamingResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DiscoveryRouterService);
};

class DiscoveryRouterService_Stub : public DiscoveryRouterService {
 public:
  DiscoveryRouterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DiscoveryRouterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DiscoveryRouterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DiscoveryRouterService ------------------------------------------

  void raft_control(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::RaftControlRequest* request,
                       ::sirius::proto::RaftControlResponse* response,
                       ::google::protobuf::Closure* done);
  void discovery_manager(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryManagerRequest* request,
                       ::sirius::proto::DiscoveryManagerResponse* response,
                       ::google::protobuf::Closure* done);
  void discovery_query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::DiscoveryQueryRequest* request,
                       ::sirius::proto::DiscoveryQueryResponse* response,
                       ::google::protobuf::Closure* done);
  void tso_service(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::TsoRequest* request,
                       ::sirius::proto::TsoResponse* response,
                       ::google::protobuf::Closure* done);
  void registry(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  void update(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  void cancel(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletInfo* request,
                       ::sirius::proto::DiscoveryRegisterResponse* response,
                       ::google::protobuf::Closure* done);
  void naming(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sirius::proto::ServletNamingRequest* request,
                       ::sirius::proto::ServletNamingResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DiscoveryRouterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fdiscovery_2einterface_2eproto
