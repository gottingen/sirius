// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/config.struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fconfig_2estruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fconfig_2estruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2fconfig_2estruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2fconfig_2estruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2fconfig_2estruct_2eproto;
namespace sirius {
namespace proto {
class ConfigInfo;
struct ConfigInfoDefaultTypeInternal;
extern ConfigInfoDefaultTypeInternal _ConfigInfo_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::ConfigInfo* Arena::CreateMaybeMessage<::sirius::proto::ConfigInfo>(Arena*);
template<> ::sirius::proto::Version* Arena::CreateMaybeMessage<::sirius::proto::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

enum ConfigType : int {
  CF_JSON = 0,
  CF_GFLAGS = 1,
  CF_TEXT = 3,
  CF_TOML = 4,
  CF_XML = 5,
  CF_YAML = 6,
  CF_INI = 7
};
bool ConfigType_IsValid(int value);
constexpr ConfigType ConfigType_MIN = CF_JSON;
constexpr ConfigType ConfigType_MAX = CF_INI;
constexpr int ConfigType_ARRAYSIZE = ConfigType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigType_descriptor();
template<typename T>
inline const std::string& ConfigType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigType_descriptor(), enum_t_value);
}
inline bool ConfigType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfigType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigType>(
    ConfigType_descriptor(), name, value);
}
// ===================================================================

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // required int32 major = 1;
  bool has_major() const;
  private:
  bool _internal_has_major() const;
  public:
  void clear_major();
  int32_t major() const;
  void set_major(int32_t value);
  private:
  int32_t _internal_major() const;
  void _internal_set_major(int32_t value);
  public:

  // required int32 minor = 2;
  bool has_minor() const;
  private:
  bool _internal_has_minor() const;
  public:
  void clear_minor();
  int32_t minor() const;
  void set_minor(int32_t value);
  private:
  int32_t _internal_minor() const;
  void _internal_set_minor(int32_t value);
  public:

  // required int32 patch = 3;
  bool has_patch() const;
  private:
  bool _internal_has_patch() const;
  public:
  void clear_patch();
  int32_t patch() const;
  void set_patch(int32_t value);
  private:
  int32_t _internal_patch() const;
  void _internal_set_patch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.Version)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t major_;
    int32_t minor_;
    int32_t patch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fconfig_2estruct_2eproto;
};
// -------------------------------------------------------------------

class ConfigInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.ConfigInfo) */ {
 public:
  inline ConfigInfo() : ConfigInfo(nullptr) {}
  ~ConfigInfo() override;
  explicit PROTOBUF_CONSTEXPR ConfigInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigInfo(const ConfigInfo& from);
  ConfigInfo(ConfigInfo&& from) noexcept
    : ConfigInfo() {
    *this = ::std::move(from);
  }

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigInfo& operator=(ConfigInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigInfo*>(
               &_ConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigInfo& a, ConfigInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigInfo& from) {
    ConfigInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.ConfigInfo";
  }
  protected:
  explicit ConfigInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 3,
    kVersionFieldNumber = 2,
    kTypeFieldNumber = 4,
    kTimeFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional .sirius.proto.Version version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::sirius::proto::Version& version() const;
  PROTOBUF_NODISCARD ::sirius::proto::Version* release_version();
  ::sirius::proto::Version* mutable_version();
  void set_allocated_version(::sirius::proto::Version* version);
  private:
  const ::sirius::proto::Version& _internal_version() const;
  ::sirius::proto::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::sirius::proto::Version* version);
  ::sirius::proto::Version* unsafe_arena_release_version();

  // optional .sirius.proto.ConfigType type = 4 [default = CF_JSON];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::sirius::proto::ConfigType type() const;
  void set_type(::sirius::proto::ConfigType value);
  private:
  ::sirius::proto::ConfigType _internal_type() const;
  void _internal_set_type(::sirius::proto::ConfigType value);
  public:

  // optional uint32 time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint32_t time() const;
  void set_time(uint32_t value);
  private:
  uint32_t _internal_time() const;
  void _internal_set_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.ConfigInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::sirius::proto::Version* version_;
    int type_;
    uint32_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fconfig_2estruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// required int32 major = 1;
inline bool Version::_internal_has_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Version::has_major() const {
  return _internal_has_major();
}
inline void Version::clear_major() {
  _impl_.major_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Version::_internal_major() const {
  return _impl_.major_;
}
inline int32_t Version::major() const {
  // @@protoc_insertion_point(field_get:sirius.proto.Version.major)
  return _internal_major();
}
inline void Version::_internal_set_major(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.major_ = value;
}
inline void Version::set_major(int32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:sirius.proto.Version.major)
}

// required int32 minor = 2;
inline bool Version::_internal_has_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Version::has_minor() const {
  return _internal_has_minor();
}
inline void Version::clear_minor() {
  _impl_.minor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Version::_internal_minor() const {
  return _impl_.minor_;
}
inline int32_t Version::minor() const {
  // @@protoc_insertion_point(field_get:sirius.proto.Version.minor)
  return _internal_minor();
}
inline void Version::_internal_set_minor(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.minor_ = value;
}
inline void Version::set_minor(int32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:sirius.proto.Version.minor)
}

// required int32 patch = 3;
inline bool Version::_internal_has_patch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Version::has_patch() const {
  return _internal_has_patch();
}
inline void Version::clear_patch() {
  _impl_.patch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Version::_internal_patch() const {
  return _impl_.patch_;
}
inline int32_t Version::patch() const {
  // @@protoc_insertion_point(field_get:sirius.proto.Version.patch)
  return _internal_patch();
}
inline void Version::_internal_set_patch(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.patch_ = value;
}
inline void Version::set_patch(int32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:sirius.proto.Version.patch)
}

// -------------------------------------------------------------------

// ConfigInfo

// required string name = 1;
inline bool ConfigInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigInfo::has_name() const {
  return _internal_has_name();
}
inline void ConfigInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigInfo::name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ConfigInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ConfigInfo.name)
}
inline std::string* ConfigInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ConfigInfo.name)
  return _s;
}
inline const std::string& ConfigInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConfigInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigInfo::release_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.ConfigInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ConfigInfo.name)
}

// optional .sirius.proto.Version version = 2;
inline bool ConfigInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline bool ConfigInfo::has_version() const {
  return _internal_has_version();
}
inline void ConfigInfo::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::sirius::proto::Version& ConfigInfo::_internal_version() const {
  const ::sirius::proto::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::sirius::proto::Version&>(
      ::sirius::proto::_Version_default_instance_);
}
inline const ::sirius::proto::Version& ConfigInfo::version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ConfigInfo.version)
  return _internal_version();
}
inline void ConfigInfo::unsafe_arena_set_allocated_version(
    ::sirius::proto::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sirius.proto.ConfigInfo.version)
}
inline ::sirius::proto::Version* ConfigInfo::release_version() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sirius::proto::Version* ConfigInfo::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:sirius.proto.ConfigInfo.version)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::sirius::proto::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::sirius::proto::Version* ConfigInfo::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::sirius::proto::Version>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::sirius::proto::Version* ConfigInfo::mutable_version() {
  ::sirius::proto::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ConfigInfo.version)
  return _msg;
}
inline void ConfigInfo::set_allocated_version(::sirius::proto::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ConfigInfo.version)
}

// optional string content = 3;
inline bool ConfigInfo::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigInfo::has_content() const {
  return _internal_has_content();
}
inline void ConfigInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigInfo::content() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ConfigInfo.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigInfo::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.ConfigInfo.content)
}
inline std::string* ConfigInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:sirius.proto.ConfigInfo.content)
  return _s;
}
inline const std::string& ConfigInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ConfigInfo::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigInfo::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigInfo::release_content() {
  // @@protoc_insertion_point(field_release:sirius.proto.ConfigInfo.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConfigInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.ConfigInfo.content)
}

// optional .sirius.proto.ConfigType type = 4 [default = CF_JSON];
inline bool ConfigInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigInfo::has_type() const {
  return _internal_has_type();
}
inline void ConfigInfo::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sirius::proto::ConfigType ConfigInfo::_internal_type() const {
  return static_cast< ::sirius::proto::ConfigType >(_impl_.type_);
}
inline ::sirius::proto::ConfigType ConfigInfo::type() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ConfigInfo.type)
  return _internal_type();
}
inline void ConfigInfo::_internal_set_type(::sirius::proto::ConfigType value) {
  assert(::sirius::proto::ConfigType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}
inline void ConfigInfo::set_type(::sirius::proto::ConfigType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ConfigInfo.type)
}

// optional uint32 time = 5;
inline bool ConfigInfo::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConfigInfo::has_time() const {
  return _internal_has_time();
}
inline void ConfigInfo::clear_time() {
  _impl_.time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ConfigInfo::_internal_time() const {
  return _impl_.time_;
}
inline uint32_t ConfigInfo::time() const {
  // @@protoc_insertion_point(field_get:sirius.proto.ConfigInfo.time)
  return _internal_time();
}
inline void ConfigInfo::_internal_set_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.time_ = value;
}
inline void ConfigInfo::set_time(uint32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:sirius.proto.ConfigInfo.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sirius::proto::ConfigType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::ConfigType>() {
  return ::sirius::proto::ConfigType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fconfig_2estruct_2eproto
