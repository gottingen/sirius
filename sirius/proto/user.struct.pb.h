// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/user.struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fuser_2estruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fuser_2estruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2fuser_2estruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2fuser_2estruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2fuser_2estruct_2eproto;
namespace sirius {
namespace proto {
class PrivilegeServlet;
struct PrivilegeServletDefaultTypeInternal;
extern PrivilegeServletDefaultTypeInternal _PrivilegeServlet_default_instance_;
class PrivilegeZone;
struct PrivilegeZoneDefaultTypeInternal;
extern PrivilegeZoneDefaultTypeInternal _PrivilegeZone_default_instance_;
class UserPrivilege;
struct UserPrivilegeDefaultTypeInternal;
extern UserPrivilegeDefaultTypeInternal _UserPrivilege_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::PrivilegeServlet* Arena::CreateMaybeMessage<::sirius::proto::PrivilegeServlet>(Arena*);
template<> ::sirius::proto::PrivilegeZone* Arena::CreateMaybeMessage<::sirius::proto::PrivilegeZone>(Arena*);
template<> ::sirius::proto::UserPrivilege* Arena::CreateMaybeMessage<::sirius::proto::UserPrivilege>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

enum RW : int {
  READ = 1,
  WRITE = 2
};
bool RW_IsValid(int value);
constexpr RW RW_MIN = READ;
constexpr RW RW_MAX = WRITE;
constexpr int RW_ARRAYSIZE = RW_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RW_descriptor();
template<typename T>
inline const std::string& RW_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RW>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RW_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RW_descriptor(), enum_t_value);
}
inline bool RW_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RW* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RW>(
    RW_descriptor(), name, value);
}
// ===================================================================

class PrivilegeZone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.PrivilegeZone) */ {
 public:
  inline PrivilegeZone() : PrivilegeZone(nullptr) {}
  ~PrivilegeZone() override;
  explicit PROTOBUF_CONSTEXPR PrivilegeZone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivilegeZone(const PrivilegeZone& from);
  PrivilegeZone(PrivilegeZone&& from) noexcept
    : PrivilegeZone() {
    *this = ::std::move(from);
  }

  inline PrivilegeZone& operator=(const PrivilegeZone& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivilegeZone& operator=(PrivilegeZone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivilegeZone& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivilegeZone* internal_default_instance() {
    return reinterpret_cast<const PrivilegeZone*>(
               &_PrivilegeZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrivilegeZone& a, PrivilegeZone& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivilegeZone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivilegeZone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivilegeZone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivilegeZone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrivilegeZone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrivilegeZone& from) {
    PrivilegeZone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivilegeZone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.PrivilegeZone";
  }
  protected:
  explicit PrivilegeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneFieldNumber = 1,
    kZoneIdFieldNumber = 2,
    kForceFieldNumber = 4,
    kZoneRwFieldNumber = 3,
  };
  // required string zone = 1;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // optional int64 zone_id = 2;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int64_t zone_id() const;
  void set_zone_id(int64_t value);
  private:
  int64_t _internal_zone_id() const;
  void _internal_set_zone_id(int64_t value);
  public:

  // optional bool force = 4;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // optional .sirius.proto.RW zone_rw = 3;
  bool has_zone_rw() const;
  private:
  bool _internal_has_zone_rw() const;
  public:
  void clear_zone_rw();
  ::sirius::proto::RW zone_rw() const;
  void set_zone_rw(::sirius::proto::RW value);
  private:
  ::sirius::proto::RW _internal_zone_rw() const;
  void _internal_set_zone_rw(::sirius::proto::RW value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.PrivilegeZone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    int64_t zone_id_;
    bool force_;
    int zone_rw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fuser_2estruct_2eproto;
};
// -------------------------------------------------------------------

class PrivilegeServlet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.PrivilegeServlet) */ {
 public:
  inline PrivilegeServlet() : PrivilegeServlet(nullptr) {}
  ~PrivilegeServlet() override;
  explicit PROTOBUF_CONSTEXPR PrivilegeServlet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivilegeServlet(const PrivilegeServlet& from);
  PrivilegeServlet(PrivilegeServlet&& from) noexcept
    : PrivilegeServlet() {
    *this = ::std::move(from);
  }

  inline PrivilegeServlet& operator=(const PrivilegeServlet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivilegeServlet& operator=(PrivilegeServlet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrivilegeServlet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivilegeServlet* internal_default_instance() {
    return reinterpret_cast<const PrivilegeServlet*>(
               &_PrivilegeServlet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivilegeServlet& a, PrivilegeServlet& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivilegeServlet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivilegeServlet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivilegeServlet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivilegeServlet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrivilegeServlet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrivilegeServlet& from) {
    PrivilegeServlet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivilegeServlet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.PrivilegeServlet";
  }
  protected:
  explicit PrivilegeServlet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneFieldNumber = 1,
    kServletNameFieldNumber = 3,
    kZoneIdFieldNumber = 2,
    kServletIdFieldNumber = 4,
    kForceFieldNumber = 6,
    kServletRwFieldNumber = 5,
  };
  // required string zone = 1;
  bool has_zone() const;
  private:
  bool _internal_has_zone() const;
  public:
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_NODISCARD std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // required string servlet_name = 3;
  bool has_servlet_name() const;
  private:
  bool _internal_has_servlet_name() const;
  public:
  void clear_servlet_name();
  const std::string& servlet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servlet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servlet_name();
  PROTOBUF_NODISCARD std::string* release_servlet_name();
  void set_allocated_servlet_name(std::string* servlet_name);
  private:
  const std::string& _internal_servlet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servlet_name(const std::string& value);
  std::string* _internal_mutable_servlet_name();
  public:

  // optional int64 zone_id = 2;
  bool has_zone_id() const;
  private:
  bool _internal_has_zone_id() const;
  public:
  void clear_zone_id();
  int64_t zone_id() const;
  void set_zone_id(int64_t value);
  private:
  int64_t _internal_zone_id() const;
  void _internal_set_zone_id(int64_t value);
  public:

  // optional int64 servlet_id = 4;
  bool has_servlet_id() const;
  private:
  bool _internal_has_servlet_id() const;
  public:
  void clear_servlet_id();
  int64_t servlet_id() const;
  void set_servlet_id(int64_t value);
  private:
  int64_t _internal_servlet_id() const;
  void _internal_set_servlet_id(int64_t value);
  public:

  // optional bool force = 6;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // optional .sirius.proto.RW servlet_rw = 5;
  bool has_servlet_rw() const;
  private:
  bool _internal_has_servlet_rw() const;
  public:
  void clear_servlet_rw();
  ::sirius::proto::RW servlet_rw() const;
  void set_servlet_rw(::sirius::proto::RW value);
  private:
  ::sirius::proto::RW _internal_servlet_rw() const;
  void _internal_set_servlet_rw(::sirius::proto::RW value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.PrivilegeServlet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servlet_name_;
    int64_t zone_id_;
    int64_t servlet_id_;
    bool force_;
    int servlet_rw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fuser_2estruct_2eproto;
};
// -------------------------------------------------------------------

class UserPrivilege final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.UserPrivilege) */ {
 public:
  inline UserPrivilege() : UserPrivilege(nullptr) {}
  ~UserPrivilege() override;
  explicit PROTOBUF_CONSTEXPR UserPrivilege(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserPrivilege(const UserPrivilege& from);
  UserPrivilege(UserPrivilege&& from) noexcept
    : UserPrivilege() {
    *this = ::std::move(from);
  }

  inline UserPrivilege& operator=(const UserPrivilege& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPrivilege& operator=(UserPrivilege&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPrivilege& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPrivilege* internal_default_instance() {
    return reinterpret_cast<const UserPrivilege*>(
               &_UserPrivilege_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserPrivilege& a, UserPrivilege& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPrivilege* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPrivilege* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPrivilege* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserPrivilege>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserPrivilege& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserPrivilege& from) {
    UserPrivilege::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPrivilege* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.UserPrivilege";
  }
  protected:
  explicit UserPrivilege(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivilegeZoneFieldNumber = 7,
    kPrivilegeServletFieldNumber = 8,
    kIpFieldNumber = 10,
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kNamespaceNameFieldNumber = 3,
    kResourceTagFieldNumber = 14,
    kTokenFieldNumber = 20,
    kNamespaceIdFieldNumber = 4,
    kVersionFieldNumber = 11,
    kNeedAuthAddrFieldNumber = 13,
  };
  // repeated .sirius.proto.PrivilegeZone privilege_zone = 7;
  int privilege_zone_size() const;
  private:
  int _internal_privilege_zone_size() const;
  public:
  void clear_privilege_zone();
  ::sirius::proto::PrivilegeZone* mutable_privilege_zone(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeZone >*
      mutable_privilege_zone();
  private:
  const ::sirius::proto::PrivilegeZone& _internal_privilege_zone(int index) const;
  ::sirius::proto::PrivilegeZone* _internal_add_privilege_zone();
  public:
  const ::sirius::proto::PrivilegeZone& privilege_zone(int index) const;
  ::sirius::proto::PrivilegeZone* add_privilege_zone();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeZone >&
      privilege_zone() const;

  // repeated .sirius.proto.PrivilegeServlet privilege_servlet = 8;
  int privilege_servlet_size() const;
  private:
  int _internal_privilege_servlet_size() const;
  public:
  void clear_privilege_servlet();
  ::sirius::proto::PrivilegeServlet* mutable_privilege_servlet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeServlet >*
      mutable_privilege_servlet();
  private:
  const ::sirius::proto::PrivilegeServlet& _internal_privilege_servlet(int index) const;
  ::sirius::proto::PrivilegeServlet* _internal_add_privilege_servlet();
  public:
  const ::sirius::proto::PrivilegeServlet& privilege_servlet(int index) const;
  ::sirius::proto::PrivilegeServlet* add_privilege_servlet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeServlet >&
      privilege_servlet() const;

  // repeated string ip = 10;
  int ip_size() const;
  private:
  int _internal_ip_size() const;
  public:
  void clear_ip();
  const std::string& ip(int index) const;
  std::string* mutable_ip(int index);
  void set_ip(int index, const std::string& value);
  void set_ip(int index, std::string&& value);
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  std::string* add_ip();
  void add_ip(const std::string& value);
  void add_ip(std::string&& value);
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip();
  private:
  const std::string& _internal_ip(int index) const;
  std::string* _internal_add_ip();
  public:

  // required string username = 1;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required string namespace_name = 3;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_namespace_name(std::string* namespace_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string resource_tag = 14;
  bool has_resource_tag() const;
  private:
  bool _internal_has_resource_tag() const;
  public:
  void clear_resource_tag();
  const std::string& resource_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_tag();
  PROTOBUF_NODISCARD std::string* release_resource_tag();
  void set_allocated_resource_tag(std::string* resource_tag);
  private:
  const std::string& _internal_resource_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_tag(const std::string& value);
  std::string* _internal_mutable_resource_tag();
  public:

  // optional string token = 20;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional int64 namespace_id = 4;
  bool has_namespace_id() const;
  private:
  bool _internal_has_namespace_id() const;
  public:
  void clear_namespace_id();
  int64_t app_id() const;
  void set_app_id(int64_t value);
  private:
  int64_t _internal_namespace_id() const;
  void _internal_set_app_id(int64_t value);
  public:

  // optional int64 version = 11;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional bool need_auth_addr = 13;
  bool has_need_auth_addr() const;
  private:
  bool _internal_has_need_auth_addr() const;
  public:
  void clear_need_auth_addr();
  bool need_auth_addr() const;
  void set_need_auth_addr(bool value);
  private:
  bool _internal_need_auth_addr() const;
  void _internal_set_need_auth_addr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.UserPrivilege)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeZone > privilege_zone_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeServlet > privilege_servlet_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int64_t namespace_id_;
    int64_t version_;
    bool need_auth_addr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2fuser_2estruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrivilegeZone

// required string zone = 1;
inline bool PrivilegeZone::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivilegeZone::has_zone() const {
  return _internal_has_zone();
}
inline void PrivilegeZone::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrivilegeZone::zone() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeZone.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivilegeZone::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeZone.zone)
}
inline std::string* PrivilegeZone::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:sirius.proto.PrivilegeZone.zone)
  return _s;
}
inline const std::string& PrivilegeZone::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void PrivilegeZone::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivilegeZone::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivilegeZone::release_zone() {
  // @@protoc_insertion_point(field_release:sirius.proto.PrivilegeZone.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrivilegeZone::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.PrivilegeZone.zone)
}

// optional int64 zone_id = 2;
inline bool PrivilegeZone::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrivilegeZone::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void PrivilegeZone::clear_zone_id() {
  _impl_.zone_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t PrivilegeZone::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int64_t PrivilegeZone::zone_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeZone.zone_id)
  return _internal_zone_id();
}
inline void PrivilegeZone::_internal_set_zone_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zone_id_ = value;
}
inline void PrivilegeZone::set_zone_id(int64_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeZone.zone_id)
}

// optional .sirius.proto.RW zone_rw = 3;
inline bool PrivilegeZone::_internal_has_zone_rw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrivilegeZone::has_zone_rw() const {
  return _internal_has_zone_rw();
}
inline void PrivilegeZone::clear_zone_rw() {
  _impl_.zone_rw_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::sirius::proto::RW PrivilegeZone::_internal_zone_rw() const {
  return static_cast< ::sirius::proto::RW >(_impl_.zone_rw_);
}
inline ::sirius::proto::RW PrivilegeZone::zone_rw() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeZone.zone_rw)
  return _internal_zone_rw();
}
inline void PrivilegeZone::_internal_set_zone_rw(::sirius::proto::RW value) {
  assert(::sirius::proto::RW_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.zone_rw_ = value;
}
inline void PrivilegeZone::set_zone_rw(::sirius::proto::RW value) {
  _internal_set_zone_rw(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeZone.zone_rw)
}

// optional bool force = 4;
inline bool PrivilegeZone::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrivilegeZone::has_force() const {
  return _internal_has_force();
}
inline void PrivilegeZone::clear_force() {
  _impl_.force_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PrivilegeZone::_internal_force() const {
  return _impl_.force_;
}
inline bool PrivilegeZone::force() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeZone.force)
  return _internal_force();
}
inline void PrivilegeZone::_internal_set_force(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.force_ = value;
}
inline void PrivilegeZone::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeZone.force)
}

// -------------------------------------------------------------------

// PrivilegeServlet

// required string zone = 1;
inline bool PrivilegeServlet::_internal_has_zone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_zone() const {
  return _internal_has_zone();
}
inline void PrivilegeServlet::clear_zone() {
  _impl_.zone_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrivilegeServlet::zone() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivilegeServlet::set_zone(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.zone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.zone)
}
inline std::string* PrivilegeServlet::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:sirius.proto.PrivilegeServlet.zone)
  return _s;
}
inline const std::string& PrivilegeServlet::_internal_zone() const {
  return _impl_.zone_.Get();
}
inline void PrivilegeServlet::_internal_set_zone(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zone_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivilegeServlet::_internal_mutable_zone() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zone_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivilegeServlet::release_zone() {
  // @@protoc_insertion_point(field_release:sirius.proto.PrivilegeServlet.zone)
  if (!_internal_has_zone()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.zone_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrivilegeServlet::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zone_.SetAllocated(zone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.zone_.IsDefault()) {
    _impl_.zone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.PrivilegeServlet.zone)
}

// optional int64 zone_id = 2;
inline bool PrivilegeServlet::_internal_has_zone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_zone_id() const {
  return _internal_has_zone_id();
}
inline void PrivilegeServlet::clear_zone_id() {
  _impl_.zone_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t PrivilegeServlet::_internal_zone_id() const {
  return _impl_.zone_id_;
}
inline int64_t PrivilegeServlet::zone_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.zone_id)
  return _internal_zone_id();
}
inline void PrivilegeServlet::_internal_set_zone_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zone_id_ = value;
}
inline void PrivilegeServlet::set_zone_id(int64_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.zone_id)
}

// required string servlet_name = 3;
inline bool PrivilegeServlet::_internal_has_servlet_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_servlet_name() const {
  return _internal_has_servlet_name();
}
inline void PrivilegeServlet::clear_servlet_name() {
  _impl_.servlet_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PrivilegeServlet::servlet_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.servlet_name)
  return _internal_servlet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivilegeServlet::set_servlet_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.servlet_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.servlet_name)
}
inline std::string* PrivilegeServlet::mutable_servlet_name() {
  std::string* _s = _internal_mutable_servlet_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.PrivilegeServlet.servlet_name)
  return _s;
}
inline const std::string& PrivilegeServlet::_internal_servlet_name() const {
  return _impl_.servlet_name_.Get();
}
inline void PrivilegeServlet::_internal_set_servlet_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.servlet_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivilegeServlet::_internal_mutable_servlet_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.servlet_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivilegeServlet::release_servlet_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.PrivilegeServlet.servlet_name)
  if (!_internal_has_servlet_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.servlet_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PrivilegeServlet::set_allocated_servlet_name(std::string* servlet_name) {
  if (servlet_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.servlet_name_.SetAllocated(servlet_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servlet_name_.IsDefault()) {
    _impl_.servlet_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.PrivilegeServlet.servlet_name)
}

// optional int64 servlet_id = 4;
inline bool PrivilegeServlet::_internal_has_servlet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_servlet_id() const {
  return _internal_has_servlet_id();
}
inline void PrivilegeServlet::clear_servlet_id() {
  _impl_.servlet_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t PrivilegeServlet::_internal_servlet_id() const {
  return _impl_.servlet_id_;
}
inline int64_t PrivilegeServlet::servlet_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.servlet_id)
  return _internal_servlet_id();
}
inline void PrivilegeServlet::_internal_set_servlet_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.servlet_id_ = value;
}
inline void PrivilegeServlet::set_servlet_id(int64_t value) {
  _internal_set_servlet_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.servlet_id)
}

// optional .sirius.proto.RW servlet_rw = 5;
inline bool PrivilegeServlet::_internal_has_servlet_rw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_servlet_rw() const {
  return _internal_has_servlet_rw();
}
inline void PrivilegeServlet::clear_servlet_rw() {
  _impl_.servlet_rw_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::sirius::proto::RW PrivilegeServlet::_internal_servlet_rw() const {
  return static_cast< ::sirius::proto::RW >(_impl_.servlet_rw_);
}
inline ::sirius::proto::RW PrivilegeServlet::servlet_rw() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.servlet_rw)
  return _internal_servlet_rw();
}
inline void PrivilegeServlet::_internal_set_servlet_rw(::sirius::proto::RW value) {
  assert(::sirius::proto::RW_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.servlet_rw_ = value;
}
inline void PrivilegeServlet::set_servlet_rw(::sirius::proto::RW value) {
  _internal_set_servlet_rw(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.servlet_rw)
}

// optional bool force = 6;
inline bool PrivilegeServlet::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrivilegeServlet::has_force() const {
  return _internal_has_force();
}
inline void PrivilegeServlet::clear_force() {
  _impl_.force_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool PrivilegeServlet::_internal_force() const {
  return _impl_.force_;
}
inline bool PrivilegeServlet::force() const {
  // @@protoc_insertion_point(field_get:sirius.proto.PrivilegeServlet.force)
  return _internal_force();
}
inline void PrivilegeServlet::_internal_set_force(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.force_ = value;
}
inline void PrivilegeServlet::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:sirius.proto.PrivilegeServlet.force)
}

// -------------------------------------------------------------------

// UserPrivilege

// required string username = 1;
inline bool UserPrivilege::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserPrivilege::has_username() const {
  return _internal_has_username();
}
inline void UserPrivilege::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserPrivilege::username() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPrivilege::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.username)
}
inline std::string* UserPrivilege::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.username)
  return _s;
}
inline const std::string& UserPrivilege::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserPrivilege::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPrivilege::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPrivilege::release_username() {
  // @@protoc_insertion_point(field_release:sirius.proto.UserPrivilege.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserPrivilege::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.UserPrivilege.username)
}

// optional string password = 2;
inline bool UserPrivilege::_internal_has_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserPrivilege::has_password() const {
  return _internal_has_password();
}
inline void UserPrivilege::clear_password() {
  _impl_.password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserPrivilege::password() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPrivilege::set_password(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.password)
}
inline std::string* UserPrivilege::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.password)
  return _s;
}
inline const std::string& UserPrivilege::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserPrivilege::_internal_set_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPrivilege::_internal_mutable_password() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPrivilege::release_password() {
  // @@protoc_insertion_point(field_release:sirius.proto.UserPrivilege.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.password_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserPrivilege::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.UserPrivilege.password)
}

// required string namespace_name = 3;
inline bool UserPrivilege::_internal_has_app_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserPrivilege::has_app_name() const {
  return _internal_has_app_name();
}
inline void UserPrivilege::clear_app_name() {
  _impl_.namespace_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserPrivilege::app_name() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.namespace_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPrivilege::set_app_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.namespace_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.namespace_name)
}
inline std::string* UserPrivilege::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.namespace_name)
  return _s;
}
inline const std::string& UserPrivilege::_internal_app_name() const {
  return _impl_.namespace_name_.Get();
}
inline void UserPrivilege::_internal_set_namespace_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.namespace_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPrivilege::_internal_mutable_app_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.namespace_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPrivilege::release_app_name() {
  // @@protoc_insertion_point(field_release:sirius.proto.UserPrivilege.namespace_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.namespace_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespace_name_.IsDefault()) {
    _impl_.namespace_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserPrivilege::set_allocated_namespace_name(std::string* namespace_name) {
  if (namespace_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.namespace_name_.SetAllocated(namespace_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespace_name_.IsDefault()) {
    _impl_.namespace_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.UserPrivilege.namespace_name)
}

// optional int64 namespace_id = 4;
inline bool UserPrivilege::_internal_has_namespace_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserPrivilege::has_namespace_id() const {
  return _internal_has_namespace_id();
}
inline void UserPrivilege::clear_namespace_id() {
  _impl_.namespace_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t UserPrivilege::_internal_namespace_id() const {
  return _impl_.namespace_id_;
}
inline int64_t UserPrivilege::app_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.namespace_id)
  return _internal_namespace_id();
}
inline void UserPrivilege::_internal_set_app_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.namespace_id_ = value;
}
inline void UserPrivilege::set_app_id(int64_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.namespace_id)
}

// repeated .sirius.proto.PrivilegeZone privilege_zone = 7;
inline int UserPrivilege::_internal_privilege_zone_size() const {
  return _impl_.privilege_zone_.size();
}
inline int UserPrivilege::privilege_zone_size() const {
  return _internal_privilege_zone_size();
}
inline void UserPrivilege::clear_privilege_zone() {
  _impl_.privilege_zone_.Clear();
}
inline ::sirius::proto::PrivilegeZone* UserPrivilege::mutable_privilege_zone(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.privilege_zone)
  return _impl_.privilege_zone_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeZone >*
UserPrivilege::mutable_privilege_zone() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.UserPrivilege.privilege_zone)
  return &_impl_.privilege_zone_;
}
inline const ::sirius::proto::PrivilegeZone& UserPrivilege::_internal_privilege_zone(int index) const {
  return _impl_.privilege_zone_.Get(index);
}
inline const ::sirius::proto::PrivilegeZone& UserPrivilege::privilege_zone(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.privilege_zone)
  return _internal_privilege_zone(index);
}
inline ::sirius::proto::PrivilegeZone* UserPrivilege::_internal_add_privilege_zone() {
  return _impl_.privilege_zone_.Add();
}
inline ::sirius::proto::PrivilegeZone* UserPrivilege::add_privilege_zone() {
  ::sirius::proto::PrivilegeZone* _add = _internal_add_privilege_zone();
  // @@protoc_insertion_point(field_add:sirius.proto.UserPrivilege.privilege_zone)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeZone >&
UserPrivilege::privilege_zone() const {
  // @@protoc_insertion_point(field_list:sirius.proto.UserPrivilege.privilege_zone)
  return _impl_.privilege_zone_;
}

// repeated .sirius.proto.PrivilegeServlet privilege_servlet = 8;
inline int UserPrivilege::_internal_privilege_servlet_size() const {
  return _impl_.privilege_servlet_.size();
}
inline int UserPrivilege::privilege_servlet_size() const {
  return _internal_privilege_servlet_size();
}
inline void UserPrivilege::clear_privilege_servlet() {
  _impl_.privilege_servlet_.Clear();
}
inline ::sirius::proto::PrivilegeServlet* UserPrivilege::mutable_privilege_servlet(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.privilege_servlet)
  return _impl_.privilege_servlet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeServlet >*
UserPrivilege::mutable_privilege_servlet() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.UserPrivilege.privilege_servlet)
  return &_impl_.privilege_servlet_;
}
inline const ::sirius::proto::PrivilegeServlet& UserPrivilege::_internal_privilege_servlet(int index) const {
  return _impl_.privilege_servlet_.Get(index);
}
inline const ::sirius::proto::PrivilegeServlet& UserPrivilege::privilege_servlet(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.privilege_servlet)
  return _internal_privilege_servlet(index);
}
inline ::sirius::proto::PrivilegeServlet* UserPrivilege::_internal_add_privilege_servlet() {
  return _impl_.privilege_servlet_.Add();
}
inline ::sirius::proto::PrivilegeServlet* UserPrivilege::add_privilege_servlet() {
  ::sirius::proto::PrivilegeServlet* _add = _internal_add_privilege_servlet();
  // @@protoc_insertion_point(field_add:sirius.proto.UserPrivilege.privilege_servlet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sirius::proto::PrivilegeServlet >&
UserPrivilege::privilege_servlet() const {
  // @@protoc_insertion_point(field_list:sirius.proto.UserPrivilege.privilege_servlet)
  return _impl_.privilege_servlet_;
}

// repeated string ip = 10;
inline int UserPrivilege::_internal_ip_size() const {
  return _impl_.ip_.size();
}
inline int UserPrivilege::ip_size() const {
  return _internal_ip_size();
}
inline void UserPrivilege::clear_ip() {
  _impl_.ip_.Clear();
}
inline std::string* UserPrivilege::add_ip() {
  std::string* _s = _internal_add_ip();
  // @@protoc_insertion_point(field_add_mutable:sirius.proto.UserPrivilege.ip)
  return _s;
}
inline const std::string& UserPrivilege::_internal_ip(int index) const {
  return _impl_.ip_.Get(index);
}
inline const std::string& UserPrivilege::ip(int index) const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.ip)
  return _internal_ip(index);
}
inline std::string* UserPrivilege::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.ip)
  return _impl_.ip_.Mutable(index);
}
inline void UserPrivilege::set_ip(int index, const std::string& value) {
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::set_ip(int index, std::string&& value) {
  _impl_.ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::set_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::set_ip(int index, const char* value, size_t size) {
  _impl_.ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sirius.proto.UserPrivilege.ip)
}
inline std::string* UserPrivilege::_internal_add_ip() {
  return _impl_.ip_.Add();
}
inline void UserPrivilege::add_ip(const std::string& value) {
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::add_ip(std::string&& value) {
  _impl_.ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::add_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sirius.proto.UserPrivilege.ip)
}
inline void UserPrivilege::add_ip(const char* value, size_t size) {
  _impl_.ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sirius.proto.UserPrivilege.ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserPrivilege::ip() const {
  // @@protoc_insertion_point(field_list:sirius.proto.UserPrivilege.ip)
  return _impl_.ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserPrivilege::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:sirius.proto.UserPrivilege.ip)
  return &_impl_.ip_;
}

// optional int64 version = 11;
inline bool UserPrivilege::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserPrivilege::has_version() const {
  return _internal_has_version();
}
inline void UserPrivilege::clear_version() {
  _impl_.version_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t UserPrivilege::_internal_version() const {
  return _impl_.version_;
}
inline int64_t UserPrivilege::version() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.version)
  return _internal_version();
}
inline void UserPrivilege::_internal_set_version(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.version_ = value;
}
inline void UserPrivilege::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.version)
}

// optional bool need_auth_addr = 13;
inline bool UserPrivilege::_internal_has_need_auth_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserPrivilege::has_need_auth_addr() const {
  return _internal_has_need_auth_addr();
}
inline void UserPrivilege::clear_need_auth_addr() {
  _impl_.need_auth_addr_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool UserPrivilege::_internal_need_auth_addr() const {
  return _impl_.need_auth_addr_;
}
inline bool UserPrivilege::need_auth_addr() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.need_auth_addr)
  return _internal_need_auth_addr();
}
inline void UserPrivilege::_internal_set_need_auth_addr(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.need_auth_addr_ = value;
}
inline void UserPrivilege::set_need_auth_addr(bool value) {
  _internal_set_need_auth_addr(value);
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.need_auth_addr)
}

// optional string resource_tag = 14;
inline bool UserPrivilege::_internal_has_resource_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserPrivilege::has_resource_tag() const {
  return _internal_has_resource_tag();
}
inline void UserPrivilege::clear_resource_tag() {
  _impl_.resource_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserPrivilege::resource_tag() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.resource_tag)
  return _internal_resource_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPrivilege::set_resource_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.resource_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.resource_tag)
}
inline std::string* UserPrivilege::mutable_resource_tag() {
  std::string* _s = _internal_mutable_resource_tag();
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.resource_tag)
  return _s;
}
inline const std::string& UserPrivilege::_internal_resource_tag() const {
  return _impl_.resource_tag_.Get();
}
inline void UserPrivilege::_internal_set_resource_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.resource_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPrivilege::_internal_mutable_resource_tag() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.resource_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPrivilege::release_resource_tag() {
  // @@protoc_insertion_point(field_release:sirius.proto.UserPrivilege.resource_tag)
  if (!_internal_has_resource_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.resource_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_tag_.IsDefault()) {
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserPrivilege::set_allocated_resource_tag(std::string* resource_tag) {
  if (resource_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.resource_tag_.SetAllocated(resource_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resource_tag_.IsDefault()) {
    _impl_.resource_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.UserPrivilege.resource_tag)
}

// optional string token = 20;
inline bool UserPrivilege::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserPrivilege::has_token() const {
  return _internal_has_token();
}
inline void UserPrivilege::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& UserPrivilege::token() const {
  // @@protoc_insertion_point(field_get:sirius.proto.UserPrivilege.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPrivilege::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sirius.proto.UserPrivilege.token)
}
inline std::string* UserPrivilege::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:sirius.proto.UserPrivilege.token)
  return _s;
}
inline const std::string& UserPrivilege::_internal_token() const {
  return _impl_.token_.Get();
}
inline void UserPrivilege::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPrivilege::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPrivilege::release_token() {
  // @@protoc_insertion_point(field_release:sirius.proto.UserPrivilege.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserPrivilege::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sirius.proto.UserPrivilege.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sirius::proto::RW> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sirius::proto::RW>() {
  return ::sirius::proto::RW_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2fuser_2estruct_2eproto
