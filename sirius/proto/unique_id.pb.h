// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sirius/proto/unique_id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2funique_5fid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2funique_5fid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sirius_2fproto_2funique_5fid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sirius_2fproto_2funique_5fid_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sirius_2fproto_2funique_5fid_2eproto;
namespace sirius {
namespace proto {
class AutoIncrementRequest;
struct AutoIncrementRequestDefaultTypeInternal;
extern AutoIncrementRequestDefaultTypeInternal _AutoIncrementRequest_default_instance_;
}  // namespace proto
}  // namespace sirius
PROTOBUF_NAMESPACE_OPEN
template<> ::sirius::proto::AutoIncrementRequest* Arena::CreateMaybeMessage<::sirius::proto::AutoIncrementRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sirius {
namespace proto {

// ===================================================================

class AutoIncrementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sirius.proto.AutoIncrementRequest) */ {
 public:
  inline AutoIncrementRequest() : AutoIncrementRequest(nullptr) {}
  ~AutoIncrementRequest() override;
  explicit PROTOBUF_CONSTEXPR AutoIncrementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoIncrementRequest(const AutoIncrementRequest& from);
  AutoIncrementRequest(AutoIncrementRequest&& from) noexcept
    : AutoIncrementRequest() {
    *this = ::std::move(from);
  }

  inline AutoIncrementRequest& operator=(const AutoIncrementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoIncrementRequest& operator=(AutoIncrementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoIncrementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoIncrementRequest* internal_default_instance() {
    return reinterpret_cast<const AutoIncrementRequest*>(
               &_AutoIncrementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutoIncrementRequest& a, AutoIncrementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoIncrementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoIncrementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoIncrementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoIncrementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoIncrementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AutoIncrementRequest& from) {
    AutoIncrementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoIncrementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sirius.proto.AutoIncrementRequest";
  }
  protected:
  explicit AutoIncrementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServletIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kStartIdFieldNumber = 3,
    kIncrementIdFieldNumber = 4,
    kForceFieldNumber = 5,
  };
  // required int64 servlet_id = 1;
  bool has_servlet_id() const;
  private:
  bool _internal_has_servlet_id() const;
  public:
  void clear_servlet_id();
  int64_t servlet_id() const;
  void set_servlet_id(int64_t value);
  private:
  int64_t _internal_servlet_id() const;
  void _internal_set_servlet_id(int64_t value);
  public:

  // optional uint64 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // optional uint64 start_id = 3;
  bool has_start_id() const;
  private:
  bool _internal_has_start_id() const;
  public:
  void clear_start_id();
  uint64_t start_id() const;
  void set_start_id(uint64_t value);
  private:
  uint64_t _internal_start_id() const;
  void _internal_set_start_id(uint64_t value);
  public:

  // optional uint64 increment_id = 4;
  bool has_increment_id() const;
  private:
  bool _internal_has_increment_id() const;
  public:
  void clear_increment_id();
  uint64_t increment_id() const;
  void set_increment_id(uint64_t value);
  private:
  uint64_t _internal_increment_id() const;
  void _internal_set_increment_id(uint64_t value);
  public:

  // optional bool force = 5;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sirius.proto.AutoIncrementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t servlet_id_;
    uint64_t count_;
    uint64_t start_id_;
    uint64_t increment_id_;
    bool force_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sirius_2fproto_2funique_5fid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutoIncrementRequest

// required int64 servlet_id = 1;
inline bool AutoIncrementRequest::_internal_has_servlet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutoIncrementRequest::has_servlet_id() const {
  return _internal_has_servlet_id();
}
inline void AutoIncrementRequest::clear_servlet_id() {
  _impl_.servlet_id_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t AutoIncrementRequest::_internal_servlet_id() const {
  return _impl_.servlet_id_;
}
inline int64_t AutoIncrementRequest::servlet_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AutoIncrementRequest.servlet_id)
  return _internal_servlet_id();
}
inline void AutoIncrementRequest::_internal_set_servlet_id(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.servlet_id_ = value;
}
inline void AutoIncrementRequest::set_servlet_id(int64_t value) {
  _internal_set_servlet_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AutoIncrementRequest.servlet_id)
}

// optional uint64 count = 2;
inline bool AutoIncrementRequest::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutoIncrementRequest::has_count() const {
  return _internal_has_count();
}
inline void AutoIncrementRequest::clear_count() {
  _impl_.count_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t AutoIncrementRequest::_internal_count() const {
  return _impl_.count_;
}
inline uint64_t AutoIncrementRequest::count() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AutoIncrementRequest.count)
  return _internal_count();
}
inline void AutoIncrementRequest::_internal_set_count(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.count_ = value;
}
inline void AutoIncrementRequest::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AutoIncrementRequest.count)
}

// optional uint64 start_id = 3;
inline bool AutoIncrementRequest::_internal_has_start_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutoIncrementRequest::has_start_id() const {
  return _internal_has_start_id();
}
inline void AutoIncrementRequest::clear_start_id() {
  _impl_.start_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t AutoIncrementRequest::_internal_start_id() const {
  return _impl_.start_id_;
}
inline uint64_t AutoIncrementRequest::start_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AutoIncrementRequest.start_id)
  return _internal_start_id();
}
inline void AutoIncrementRequest::_internal_set_start_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_id_ = value;
}
inline void AutoIncrementRequest::set_start_id(uint64_t value) {
  _internal_set_start_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AutoIncrementRequest.start_id)
}

// optional uint64 increment_id = 4;
inline bool AutoIncrementRequest::_internal_has_increment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutoIncrementRequest::has_increment_id() const {
  return _internal_has_increment_id();
}
inline void AutoIncrementRequest::clear_increment_id() {
  _impl_.increment_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t AutoIncrementRequest::_internal_increment_id() const {
  return _impl_.increment_id_;
}
inline uint64_t AutoIncrementRequest::increment_id() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AutoIncrementRequest.increment_id)
  return _internal_increment_id();
}
inline void AutoIncrementRequest::_internal_set_increment_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.increment_id_ = value;
}
inline void AutoIncrementRequest::set_increment_id(uint64_t value) {
  _internal_set_increment_id(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AutoIncrementRequest.increment_id)
}

// optional bool force = 5;
inline bool AutoIncrementRequest::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AutoIncrementRequest::has_force() const {
  return _internal_has_force();
}
inline void AutoIncrementRequest::clear_force() {
  _impl_.force_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool AutoIncrementRequest::_internal_force() const {
  return _impl_.force_;
}
inline bool AutoIncrementRequest::force() const {
  // @@protoc_insertion_point(field_get:sirius.proto.AutoIncrementRequest.force)
  return _internal_force();
}
inline void AutoIncrementRequest::_internal_set_force(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.force_ = value;
}
inline void AutoIncrementRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:sirius.proto.AutoIncrementRequest.force)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sirius

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sirius_2fproto_2funique_5fid_2eproto
